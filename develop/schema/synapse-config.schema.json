{
  "$schema": "https://element-hq.github.io/synapse/latest/schema/v1/meta.schema.json",
  "$id": "https://element-hq.github.io/synapse/schema/synapse/v1.135/synapse-config.schema.json",
  "type": "object",
  "properties": {
    "modules": {
      "type": "array",
      "description": "Use the `module` sub-option to add modules under this option to extend functionality. The `module` setting then has a sub-option, `config`, which can be used to define some configuration for the `module`.",
      "items": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Path to the Python class of the module."
          },
          "config": {
            "type": "object",
            "description": "Configuration options for the module."
          }
        }
      },
      "default": [],
      "examples": [
        [
          {
            "module": "my_super_module.MySuperClass",
            "config": {
              "do_thing": true
            }
          },
          {
            "module": "my_other_super_module.SomeClass",
            "config": {}
          }
        ]
      ]
    },
    "server_name": {
      "type": "string",
      "description": "This sets the public-facing domain of the server.\n\nThe `server_name` name will appear at the end of usernames and room addresses created on your server. For example if the `server_name` was example.com, usernames on your server would be in the format `@user:example.com`.\n\nIn most cases you should avoid using a matrix specific subdomain such as matrix.example.com or synapse.example.com as the `server_name` for the same reasons you wouldn't use user@email.example.com as your email address. See [here](../../delegate.md) for information on how to host Synapse on a subdomain while preserving a clean `server_name`.\n\nThe `server_name` cannot be changed later so it is important to configure this correctly before you start Synapse. It should be all lowercase and may contain an explicit port.",
      "examples": [
        "matrix.org",
        "localhost:8080"
      ]
    },
    "pid_file": {
      "type": [
        "string",
        "null"
      ],
      "description": "When running Synapse as a daemon, the file to store the pid in.",
      "default": null,
      "examples": [
        "DATADIR/homeserver.pid"
      ]
    },
    "daemonize": {
      "type": "boolean",
      "description": "Specifies whether Synapse should be started as a daemon process. If Synapse is being managed by [systemd](../../systemd-with-workers/), this option must be omitted or set to `false`.\n\nThis can also be set by the `--daemonize` (`-D`) argument when starting Synapse.\n\nSee `worker_daemonize` for more information on daemonizing workers.",
      "default": false,
      "examples": [
        true
      ]
    },
    "print_pidfile": {
      "type": "boolean",
      "description": "Print the path to the pidfile just before daemonizing.\n\nThis can also be set by the `--print-pidfile` argument when starting Synapse.",
      "default": false,
      "examples": [
        true
      ]
    },
    "user_agent_suffix": {
      "type": [
        "string",
        "null"
      ],
      "description": "A suffix that is appended to the Synapse user-agent (ex. `Synapse/v1.123.0`).",
      "default": null,
      "examples": [
        " (I'm a teapot; Linux x86_64)"
      ]
    },
    "use_frozen_dicts": {
      "type": "boolean",
      "description": "Determines whether we should freeze the internal dict object in `FrozenEvent`. Freezing prevents bugs where we accidentally share e.g. signature dicts. However, freezing a dict is expensive.",
      "default": false,
      "examples": [
        true
      ]
    },
    "web_client_location": {
      "type": [
        "string",
        "null"
      ],
      "description": "The absolute URL to the web client which `/` will redirect to.",
      "default": null,
      "examples": [
        "https://riot.example.com/"
      ]
    },
    "public_baseurl": {
      "type": [
        "string",
        "null"
      ],
      "description": "The public-facing base URL that clients use to access this Homeserver (not including _matrix/...). This is the same URL a user might enter into the \"Custom Homeserver URL\" field on their client. If you use Synapse with a reverse proxy, this should be the URL to reach Synapse via the proxy. Otherwise, it should be the URL to reach Synapse's client HTTP listener (see [`listeners`](#listeners) below).\n\nIf unset or null, `https://<server_name>/` is used.",
      "default": null,
      "examples": [
        "https://example.com/"
      ]
    },
    "serve_server_wellknown": {
      "type": "boolean",
      "description": "By default, other servers will try to reach our server on port 8448, which can be inconvenient in some environments.\n\nProvided `https://<server_name>/` on port 443 is routed to Synapse, this option configures Synapse to serve a file at `https://<server_name>/.well-known/matrix/server`. This will tell other servers to send traffic to port 443 instead.\n\nThis option currently defaults to false.\n\nSee [Delegation of incoming federation traffic](../../delegate.md) for more information.",
      "default": false,
      "examples": [
        true
      ]
    },
    "extra_well_known_client_content": {
      "type": "object",
      "description": "This option allows server runners to add arbitrary key-value pairs to the [client-facing `.well-known` response](https://spec.matrix.org/latest/client-server-api/#well-known-uri). Note that the `public_baseurl` config option must be provided for Synapse to serve a response to `/.well-known/matrix/client` at all.\n\nIf this option is provided, it parses the given yaml to json and serves it on `/.well-known/matrix/client` endpoint alongside the standard properties.\n\n*Added in Synapse 1.62.0.*",
      "examples": [
        {
          "option1": "value1",
          "option2": "value2"
        }
      ]
    },
    "soft_file_limit": {
      "type": "integer",
      "description": "Set the soft limit on the number of file descriptors synapse can use. Zero is used to indicate synapse should set the soft limit to the hard limit.",
      "default": 0,
      "examples": [
        3
      ]
    },
    "presence": {
      "type": "object",
      "description": "Presence tracking allows users to see the state (e.g online/offline) of other local and remote users. This option replaces the previous top-level `use_presence` option.",
      "properties": {
        "enabled": {
          "type": [
            "boolean",
            "string"
          ],
          "description": "Set to false to disable presence tracking on this homeserver.\n\nCan also be set to a special value of \"untracked\" which ignores updates received via clients and federation, while still accepting updates from the [module API](../../modules/index.md).\n\n*The \"untracked\" option was added in Synapse 1.96.0.*",
          "oneOf": [
            {
              "type": "boolean"
            },
            {
              "type": "string",
              "const": "untracked"
            }
          ],
          "default": true
        },
        "include_offline_users_on_sync": {
          "type": "boolean",
          "description": "When clients perform an initial or `full_state` sync, presence results for offline users are not included by default. Setting `include_offline_users_on_sync` to `true` will always include offline users in the results.",
          "default": false
        }
      },
      "examples": [
        {
          "enabled": false,
          "include_offline_users_on_sync": false
        }
      ]
    },
    "require_auth_for_profile_requests": {
      "type": "boolean",
      "description": "Whether to require authentication to retrieve profile data (avatars, display names) of other users through the client API. Note that profile data is also available via the federation API, unless `allow_profile_lookup_over_federation` is set to false.",
      "default": false,
      "examples": [
        true
      ]
    },
    "limit_profile_requests_to_users_who_share_rooms": {
      "type": "boolean",
      "description": "Use this option to require a user to share a room with another user in order to retrieve their profile information. Only checked on Client-Server requests. Profile requests from other servers should be checked by the requesting server.",
      "default": false,
      "examples": [
        true
      ]
    },
    "include_profile_data_on_invite": {
      "type": "boolean",
      "description": "Use this option to prevent a user's profile data from being retrieved and displayed in a room until they have joined it. By default, a user's profile data is included in an invite event, regardless of the values of the above two settings, and whether or not the users share a server.",
      "default": true,
      "examples": [
        false
      ]
    },
    "allow_public_rooms_without_auth": {
      "type": "boolean",
      "description": "If set to true, removes the need for authentication to access the server's public rooms directory through the client API, meaning that anyone can query the room directory.",
      "default": false,
      "examples": [
        true
      ]
    },
    "allow_public_rooms_over_federation": {
      "type": "boolean",
      "description": "If set to true, allows any other homeserver to fetch the server's public rooms directory via federation.",
      "default": false,
      "examples": [
        true
      ]
    },
    "default_room_version": {
      "type": "string",
      "description": "The default room version for newly created rooms on this server.\n\nKnown room versions are listed [here](https://spec.matrix.org/latest/rooms/#complete-list-of-room-versions)\n\nFor example, for room version 1, `default_room_version` should be set to \"1\".\n\n_Changed in Synapse 1.76:_ the default version room version was increased from [9](https://spec.matrix.org/v1.5/rooms/v9/) to [10](https://spec.matrix.org/v1.5/rooms/v10/).",
      "default": "10",
      "examples": [
        "8"
      ]
    },
    "gc_thresholds": {
      "type": [
        "array",
        "null"
      ],
      "description": "The garbage collection threshold parameters to pass to `gc.set_threshold`, if defined.",
      "default": null,
      "examples": [
        [
          700,
          10,
          10
        ]
      ]
    },
    "gc_min_interval": {
      "type": "array",
      "description": "The minimum time in seconds between each GC for a generation, regardless of the GC thresholds. This ensures that we don't do GC too frequently. A value of `[1s, 10s, 30s]` indicates that a second must pass between consecutive generation 0 GCs, etc.",
      "default": [
        "1s",
        "10s",
        "30s"
      ],
      "examples": [
        [
          "0.5s",
          "30s",
          "1m"
        ]
      ]
    },
    "filter_timeline_limit": {
      "type": "integer",
      "description": "Set the limit on the returned events in the timeline in the get and sync operations. A value of -1 means no upper limit.",
      "default": 100,
      "examples": [
        5000
      ]
    },
    "block_non_admin_invites": {
      "type": "boolean",
      "description": "Whether room invites to users on this server should be blocked (except those sent by local server admins).",
      "default": false,
      "examples": [
        true
      ]
    },
    "enable_search": {
      "type": "boolean",
      "description": "If set to false, new messages will not be indexed for searching and users will receive errors when searching for messages.",
      "default": true,
      "examples": [
        false
      ]
    },
    "ip_range_blacklist": {
      "type": "array",
      "description": "This option prevents outgoing requests from being sent to the specified blacklisted IP address CIDR ranges. If this option is not specified then it defaults to private IP address ranges (see the example below).\n\nThe blacklist applies to the outbound requests for federation, identity servers, push servers, and for checking key validity for third-party invite events.\n\n(0.0.0.0 and :: are always blacklisted, whether or not they are explicitly listed here, since they correspond to unroutable addresses.)\n\nThis option replaces `federation_ip_range_blacklist` in Synapse v1.25.0.\n\nNote: The value is ignored when an HTTP proxy is in use.",
      "items": {
        "type": "string"
      },
      "default": [
        "127.0.0.0/8",
        "10.0.0.0/8",
        "172.16.0.0/12",
        "192.168.0.0/16",
        "100.64.0.0/10",
        "192.0.0.0/24",
        "169.254.0.0/16",
        "192.88.99.0/24",
        "198.18.0.0/15",
        "192.0.2.0/24",
        "198.51.100.0/24",
        "203.0.113.0/24",
        "224.0.0.0/4",
        "::1/128",
        "fe80::/10",
        "fc00::/7",
        "2001:db8::/32",
        "ff00::/8",
        "fec0::/10"
      ]
    },
    "ip_range_whitelist": {
      "type": "array",
      "description": "List of IP address CIDR ranges that should be allowed for federation, identity servers, push servers, and for checking key validity for third-party invite events. This is useful for specifying exceptions to wide-ranging blacklisted target IP ranges – e.g. for communication with a push server only visible in your network.\n\nThis whitelist overrides `ip_range_blacklist`.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "192.168.1.1"
        ]
      ]
    },
    "listeners": {
      "type": "array",
      "description": "List of ports that Synapse should listen on, their purpose and their configuration.\n\nValid resource names are:\n\n* `client`: the client-server API (/_matrix/client). Also implies `media` and `static`. If configuring the main process, the Synapse Admin API (/_synapse/admin) is also implied.\n\n* `consent`: user consent forms (/_matrix/consent). See [here](../../consent_tracking.md) for more.\n\n* `federation`: the server-server API (/_matrix/federation). Also implies `media`, `keys`, `openid`\n\n* `keys`: the key discovery API (/_matrix/key).\n\n* `media`: the media API (/_matrix/media).\n\n* `metrics`: the metrics interface. See [here](../../metrics-howto.md). (Not compatible with Unix sockets)\n\n* `openid`: OpenID authentication. See [here](../../openid.md).\n\n* `replication`: the HTTP replication API (/_synapse/replication). See [here](../../workers.md).\n\n* `static`: static resources under synapse/static (/_matrix/static). (Mostly useful for \"fallback authentication\".)\n\n* `health`: the [health check endpoint](../../reverse_proxy.md#health-check-endpoint). This endpoint is by default active for all other resources and does not have to be activated separately. This is only useful if you want to use the health endpoint explicitly on a dedicated port or for [workers](../../workers.md) and containers without listener e.g. [application services](../../workers.md#notifying-application-services).",
      "items": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "description": "The TCP port to bind to."
          },
          "tag": {
            "type": [
              "string",
              "null"
            ],
            "description": "An alias for the port in the logger name. If set the tag is logged instead of the port. Default to `None`, is optional and only valid for listener with `type: http`. See the docs [request log format](../administration/request_log.md)."
          },
          "bind_addresses": {
            "type": [
              "array",
              "null"
            ],
            "description": "A list of local addresses to listen on. The default is \"all local interfaces\".",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of listener. Normally `http`, but other valid options are [`manhole`](../../manhole.md) and [`metrics`](../../metrics-howto.md).",
            "enum": [
              "http",
              "manhole",
              "metrics"
            ]
          },
          "tls": {
            "type": "boolean",
            "description": "Set to true to enable TLS for this listener. Will use the TLS key/cert specified in tls_private_key_path/tls_certificate_path."
          },
          "x_forwarded": {
            "type": "boolean",
            "description": "Only valid for an `http` listener. Set to true to use the X-Forwarded-For header as the client IP. Useful when Synapse is behind a [reverse-proxy](../../reverse_proxy.md)."
          },
          "request_id_header": {
            "type": [
              "string",
              "null"
            ],
            "description": "The header extracted from each incoming request that is used as the basis for the request ID. The request ID is used in [logs](../administration/request_log.md#request-log-format) and tracing to correlate and match up requests. When unset, Synapse will automatically generate sequential request IDs. This option is useful when Synapse is behind a [reverse-proxy](../../reverse_proxy.md).\n\n_Added in Synapse 1.68.0._"
          },
          "resources": {
            "type": "array",
            "description": "Only valid for an `http` listener. A list of resources to host on this port.",
            "items": {
              "type": "object",
              "properties": {
                "names": {
                  "type": "array",
                  "description": "A list of names of HTTP resources. See below for a list of valid resource names.",
                  "items": {
                    "type": "string",
                    "enum": [
                      "client",
                      "consent",
                      "federation",
                      "keys",
                      "media",
                      "metrics",
                      "openid",
                      "replication",
                      "static",
                      "health"
                    ]
                  }
                },
                "compress": {
                  "type": "boolean",
                  "description": "Set to true to enable gzip compression on HTTP bodies for this resource. This is currently only supported with the `client`, `consent`, `metrics` and `federation` resources."
                }
              }
            }
          },
          "additional_resources": {
            "type": "object",
            "description": "Only valid for an `http` listener. A map of additional endpoints which should be loaded via dynamic modules.",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "module": {
                  "type": "string"
                },
                "config": {
                  "type": "object"
                }
              }
            }
          },
          "path": {
            "type": "string",
            "description": "A path and filename for a Unix socket. Make sure it is located in a directory with read and write permissions, and that it already exists (the directory will not be created). Defaults to `None`.\n* **Note**: The use of both `path` and `port` options for the same `listener` is not compatible.\n* The `x_forwarded` option defaults to true  when using Unix sockets and can be omitted.\n* Other options that would not make sense to use with a UNIX socket, such as `bind_addresses` and `tls` will be ignored and can be removed.\n\n_Added in Synapse 1.89.0_: Unix socket support"
          },
          "mode": {
            "type": [
              "integer",
              "null"
            ],
            "description": "The file permissions to set on the UNIX socket. Defaults to `666` if unset or null.\n\n**Note:** Must be set as `type: http` (does not support `metrics` and `manhole`). Also make sure that `metrics` is not included in `resources` -> `names`\n\n_Added in Synapse 1.89.0_: Unix socket support"
          }
        }
      },
      "default": [],
      "examples": [
        [
          {
            "port": 8448,
            "type": "http",
            "tls": true,
            "resources": [
              {
                "names": [
                  "client",
                  "federation"
                ]
              }
            ]
          }
        ],
        [
          {
            "port": 8008,
            "tls": false,
            "type": "http",
            "x_forwarded": true,
            "bind_addresses": [
              "::1",
              "127.0.0.1"
            ],
            "resources": [
              {
                "names": [
                  "client",
                  "federation"
                ],
                "compress": false
              }
            ],
            "additional_resources": {
              "/_matrix/my/custom/endpoint": {
                "module": "my_module.CustomRequestHandler",
                "config": {}
              }
            }
          },
          {
            "port": 9000,
            "bind_addresses": [
              "::1",
              "127.0.0.1"
            ],
            "type": "manhole"
          }
        ],
        [
          {
            "path": "/run/synapse/main_public.sock",
            "type": "http",
            "resources": [
              {
                "names": [
                  "client",
                  "federation"
                ]
              }
            ]
          }
        ]
      ]
    },
    "manhole": {
      "type": [
        "integer",
        "null"
      ],
      "description": "Turn on the Twisted telnet manhole service on the given port.\n\nThis can also be set by the `--manhole` argument when starting Synapse.",
      "default": null,
      "examples": [
        1234
      ]
    },
    "manhole_settings": {
      "type": "object",
      "description": "Connection settings for the manhole. You can find more information on the manhole [here](../../manhole.md).",
      "properties": {
        "username": {
          "type": [
            "string",
            "null"
          ],
          "description": "The username for the manhole. This defaults to \"matrix\"."
        },
        "password": {
          "type": [
            "string",
            "null"
          ],
          "description": "The password for the manhole. This defaults to \"rabbithole\"."
        },
        "ssh_priv_key_path": {
          "type": [
            "string",
            "null"
          ],
          "description": "The private SSH key used to encrypt the manhole traffic. If left unset, then hardcoded and non-secret keys are used, which could allow traffic to be intercepted if sent over a public network."
        },
        "ssh_pub_key_path": {
          "type": [
            "string",
            "null"
          ],
          "description": "The public SSH key corresponsing to `ssh_priv_key_path`. If left unset, a hardcoded key is used."
        }
      },
      "examples": [
        {
          "username": "manhole",
          "password": "mypassword",
          "ssh_priv_key_path": "CONFDIR/id_rsa",
          "ssh_pub_key_path": "CONFDIR/id_rsa.pub"
        }
      ]
    },
    "http_proxy": {
      "type": [
        "string",
        "null"
      ],
      "description": "Proxy server to use for HTTP requests.\nFor more details, see the [forward proxy documentation](../../setup/forward_proxy.md).",
      "examples": [
        "http://USERNAME:PASSWORD@10.0.1.1:8080/"
      ]
    },
    "https_proxy": {
      "type": [
        "string",
        "null"
      ],
      "description": "Proxy server to use for HTTPS requests.\nFor more details, see the [forward proxy documentation](../../setup/forward_proxy.md).",
      "examples": [
        "http://USERNAME:PASSWORD@proxy.example.com:8080/"
      ]
    },
    "no_proxy_hosts": {
      "type": "array",
      "description": "List of hosts, IP addresses, or IP ranges in CIDR format which should not use the proxy. Synapse will directly connect to these hosts.\nFor more details, see the [forward proxy documentation](../../setup/forward_proxy.md).",
      "examples": [
        [
          "master.hostname.example.com",
          "10.1.0.0/16",
          "172.30.0.0/16"
        ]
      ]
    },
    "dummy_events_threshold": {
      "type": "integer",
      "description": "Forward extremities can build up in a room due to networking delays between homeservers. Once this happens in a large room, calculation of the state of that room can become quite expensive. To mitigate this, once the number of forward extremities reaches a given threshold, Synapse will send an `org.matrix.dummy_event` event, which will reduce the forward extremities in the room.\n\nThis setting defines the threshold (i.e. number of forward extremities in the room) at which dummy events are sent.",
      "default": 10,
      "examples": [
        5
      ]
    },
    "delete_stale_devices_after": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "null"
        }
      ],
      "description": "An optional duration. If set, Synapse will run a daily background task to log out and delete any device that hasn't been accessed for more than the specified amount of time.\n\nA value of null means devices are never pruned.\n\n**Note:** This task will always run on the main process, regardless of the value of `run_background_tasks_on`. This is due to workers currently not having the ability to delete devices.",
      "default": null,
      "examples": [
        "1y"
      ]
    },
    "email": {
      "type": "object",
      "description": "Configuration for sending emails from Synapse.\n\nServer admins can configure custom templates for email content. See [here](../../templates.md) for more information.",
      "properties": {
        "smtp_host": {
          "type": "string",
          "description": "The hostname of the outgoing SMTP server to use.",
          "default": "localhost"
        },
        "smtp_port": {
          "type": [
            "string",
            "null"
          ],
          "description": "The port on the mail server for outgoing SMTP. If null or unset, 465 is used if `force_tls` is true, else 25.\n\n_Changed in Synapse 1.64.0:_ the default port is now aware of `force_tls`.",
          "default": null
        },
        "smtp_user": {
          "type": [
            "string",
            "null"
          ],
          "description": "Username for authentication to the SMTP server.",
          "default": null
        },
        "smtp_pass": {
          "type": [
            "string",
            "null"
          ],
          "description": "Password for authentication to the SMTP server.",
          "default": null
        },
        "force_tls": {
          "type": "boolean",
          "description": "By default, Synapse connects over plain text and then optionally upgrades to TLS via STARTTLS. If this option is set to true, TLS is used from the start (Implicit TLS), and the option `require_transport_security` is ignored. It is recommended to enable this if supported by your mail server.\n\n_New in Synapse 1.64.0._",
          "default": false
        },
        "require_transport_security": {
          "type": "boolean",
          "description": "Set to true to require TLS transport security for SMTP. By default, Synapse will connect over plain text, and will then switch to TLS via STARTTLS *if the SMTP server supports it*. If this option is set, Synapse will refuse to connect unless the server supports STARTTLS.",
          "default": false
        },
        "enable_tls": {
          "type": "boolean",
          "description": "By default, if the server supports TLS, it will be used, and the server must present a certificate that is valid for `tlsname`. If this option is set to false, TLS will not be used.",
          "default": true
        },
        "tlsname": {
          "type": "string",
          "description": "The domain name the SMTP server's TLS certificate must be valid for, defaulting to `smtp_host`."
        },
        "notif_from": {
          "type": [
            "string",
            "null"
          ],
          "description": "Defines the \"From\" address to use when sending emails. It must be set if email sending is enabled. The placeholder `%(app)s` will be replaced by the application name, which is normally set in `app_name`, but may be overridden by the Matrix client application. Note that the placeholder must be written `%(app)s`, including the trailing 's'.",
          "default": null
        },
        "app_name": {
          "type": "string",
          "description": "Defines the default value for `%(app)s` in `notif_from` and email subjects.",
          "default": "Matrix"
        },
        "enable_notifs": {
          "type": "boolean",
          "description": "Set to true to allow users to receive e-mail notifications. If this is not set, users can configure e-mail notifications but will not receive them.",
          "default": false
        },
        "notif_for_new_users": {
          "type": "boolean",
          "description": "Set to false to disable automatic subscription to email notifications for new users.",
          "default": true
        },
        "notif_delay_before_mail": {
          "$ref": "#/$defs/duration",
          "description": "The time to wait before emailing about a notification. This gives the user a chance to view the message via push or an open client.\n\n_New in Synapse 1.99.0._",
          "default": "10m"
        },
        "client_base_url": {
          "type": "string",
          "description": "Custom URL for client links within the email notifications. (This setting used to be called `riot_base_url`; the old name is still supported for backwards-compatibility but is now deprecated.)",
          "default": "https://matrix.to"
        },
        "validation_token_lifetime": {
          "$ref": "#/$defs/duration",
          "description": "Configures the time that a validation email will expire after sending.",
          "default": "1h"
        },
        "invite_client_location": {
          "type": [
            "string",
            "null"
          ],
          "description": "The web client location to direct users to during an invite. This is passed to the identity server as the `org.matrix.web_client_location` key. If null or unset no guidance is given to the identity server.",
          "default": null
        },
        "subjects": {
          "type": "object",
          "description": "Subjects to use when sending emails from Synapse. The placeholder `%(app)s` will be replaced with the value of the `app_name` setting, or by a value dictated by the Matrix client application. In addition, each subject can use the following placeholders: `%(person)s`, which will be replaced by the displayname of the user(s) that sent the message(s), e.g. \"Alice and Bob\", and `%(room)s`, which will be replaced by the name of the room the message(s) have been sent to, e.g. \"My super room\". In addition, emails related to account administration will can use the `%(server_name)s` placeholder, which will be replaced by the value of the `server_name` setting in your Synapse configuration.",
          "properties": {
            "message_from_person_in_room": {
              "type": "string",
              "description": "Subject to use to notify about one message from one or more user(s) in a room which has a name.",
              "default": "[%(app)s] You have a message on %(app)s from %(person)s in the %(room)s room..."
            },
            "message_from_person": {
              "type": "string",
              "description": "Subject to use to notify about one message from one or more user(s) in a room which doesn't have a name.",
              "default": "[%(app)s] You have a message on %(app)s from %(person)s..."
            },
            "messages_from_person": {
              "type": "string",
              "description": "Subject to use to notify about multiple messages from one or more users in a room which doesn't have a name.",
              "default": "[%(app)s] You have messages on %(app)s from %(person)s..."
            },
            "messages_in_room": {
              "type": "string",
              "description": "Subject to use to notify about multiple messages in a room which has a name.",
              "default": "[%(app)s] You have messages on %(app)s in the %(room)s room..."
            },
            "messages_in_room_and_others": {
              "type": "string",
              "description": "Subject to use to notify about multiple messages in multiple rooms.",
              "default": "[%(app)s] You have messages on %(app)s in the %(room)s room and others..."
            },
            "messages_from_person_and_others": {
              "type": "string",
              "description": "Subject to use to notify about multiple messages from multiple persons in multiple rooms. This is similar to the setting above except it's used when the room in which the notification was triggered has no name.",
              "default": "[%(app)s] You have messages on %(app)s from %(person)s and others..."
            },
            "invite_from_person_to_room": {
              "type": "string",
              "description": "Subject to use to notify about an invite to a room which has a name.",
              "default": "[%(app)s] %(person)s has invited you to join the %(room)s room on %(app)s..."
            },
            "invite_from_person": {
              "type": "string",
              "description": "Subject to use to notify about an invite to a room which doesn't have a name.",
              "default": "[%(app)s] %(person)s has invited you to chat on %(app)s..."
            },
            "password_reset": {
              "type": "string",
              "description": "Subject to use when sending a password reset email.",
              "default": "[%(server_name)s] Password reset"
            },
            "email_validation": {
              "type": "string",
              "description": "Subject to use when sending a verification email to assert an address's ownership.",
              "default": "[%(server_name)s] Validate your email"
            }
          }
        }
      },
      "examples": [
        {
          "smtp_host": "mail.server",
          "smtp_port": 587,
          "smtp_user": "exampleusername",
          "smtp_pass": "examplepassword",
          "force_tls": true,
          "require_transport_security": true,
          "enable_tls": false,
          "tlsname": "mail.server.example.com",
          "notif_from": "Your Friendly %(app)s homeserver <noreply@example.com>",
          "app_name": "my_branded_matrix_server",
          "enable_notifs": true,
          "notif_for_new_users": false,
          "client_base_url": "http://localhost/riot",
          "validation_token_lifetime": "15m",
          "invite_client_location": "https://app.element.io",
          "subjects": {
            "message_from_person_in_room": "[%(app)s] You have a message on %(app)s from %(person)s in the %(room)s room...",
            "message_from_person": "[%(app)s] You have a message on %(app)s from %(person)s...",
            "messages_from_person": "[%(app)s] You have messages on %(app)s from %(person)s...",
            "messages_in_room": "[%(app)s] You have messages on %(app)s in the %(room)s room...",
            "messages_in_room_and_others": "[%(app)s] You have messages on %(app)s in the %(room)s room and others...",
            "messages_from_person_and_others": "[%(app)s] You have messages on %(app)s from %(person)s and others...",
            "invite_from_person_to_room": "[%(app)s] %(person)s has invited you to join the %(room)s room on %(app)s...",
            "invite_from_person": "[%(app)s] %(person)s has invited you to chat on %(app)s...",
            "password_reset": "[%(server_name)s] Password reset",
            "email_validation": "[%(server_name)s] Validate your email"
          }
        }
      ]
    },
    "max_event_delay_duration": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "null"
        }
      ],
      "description": "The maximum allowed duration by which sent events can be delayed, as per [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140). Must be a positive value if set.\n\nIf null or unset, sending of delayed events is disallowed.",
      "default": null,
      "examples": [
        "24h"
      ]
    },
    "user_types": {
      "type": "object",
      "description": "Configuration settings related to the user types feature.",
      "properties": {
        "default_user_type": {
          "type": [
            "string",
            "null"
          ],
          "description": "The default user type to use for registering new users when no value has been specified. Defaults to none.",
          "default": null
        },
        "extra_user_types": {
          "type": "array",
          "description": "Array of additional user types to allow. These are treated as real users.",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "examples": [
        {
          "default_user_type": "custom",
          "extra_user_types": [
            "custom",
            "custom2"
          ]
        }
      ]
    },
    "admin_contact": {
      "type": [
        "string",
        "null"
      ],
      "description": "How to reach the server admin, used in `ResourceLimitError`.",
      "default": null,
      "examples": [
        "mailto:admin@server.com"
      ]
    },
    "hs_disabled": {
      "type": "boolean",
      "description": "Blocks users from connecting to the homeserver and provides the human-readable reason given in `hs_disabled_message`.",
      "default": false,
      "examples": [
        true
      ]
    },
    "hs_disabled_message": {
      "type": "string",
      "description": "Human-readable reason why the connection was blocked.",
      "default": "Homeserver is currently blocked",
      "examples": [
        "Reason for why the HS is blocked"
      ]
    },
    "limit_usage_by_mau": {
      "type": "boolean",
      "description": "This option disables/enables monthly active user blocking. Used in cases where the admin or server owner wants to limit to the number of monthly active users. When enabled and a limit is reached the server returns a `ResourceLimitError` with error type `Codes.RESOURCE_LIMIT_EXCEEDED`. If this is enabled, a value for `max_mau_value` must also be set.\n\nSee [Monthly Active Users](../administration/monthly_active_users.md) for details on how to configure MAU.",
      "default": false,
      "examples": [
        true
      ]
    },
    "max_mau_value": {
      "type": "integer",
      "description": "This option sets the hard limit of monthly active users above which the server will start blocking user actions if `limit_usage_by_mau` is enabled.",
      "default": 0,
      "examples": [
        50
      ]
    },
    "mau_trial_days": {
      "type": "integer",
      "description": "The option `mau_trial_days` is a means to add a grace period for active users. It means that users must be active for the specified number of days before they can be considered active and guards against the case where lots of users sign up in a short space of time never to return after their initial session.",
      "default": 0,
      "examples": [
        5
      ]
    },
    "mau_appservice_trial_days": {
      "type": "object",
      "description": "The option `mau_appservice_trial_days` is similar to `mau_trial_days`, but applies a different trial number if the user was registered by an appservice. A value of 0 means no trial days are applied. Appservices not listed in this dictionary use the value of `mau_trial_days` instead.",
      "additionalProperties": {
        "type": "integer"
      },
      "default": {},
      "examples": [
        {
          "my_appservice_id": 3,
          "another_appservice_id": 6
        }
      ]
    },
    "mau_limit_alerting": {
      "type": "boolean",
      "description": "Limit client-side alerting should the mau limit be reached. This is useful for small instances where the admin has 5 mau seats (say) for 5 specific people and no interest increasing the mau limit further.",
      "default": true,
      "examples": [
        false
      ]
    },
    "mau_stats_only": {
      "type": "boolean",
      "description": "If enabled, the metrics for the number of monthly active users will be populated, however no one will be limited based on these numbers. If `limit_usage_by_mau` is true, this is implied to be true.",
      "default": false,
      "examples": [
        true
      ]
    },
    "mau_limit_reserved_threepids": {
      "type": "array",
      "description": "Sometimes the server admin will want to ensure certain accounts are never blocked by mau checking. These accounts are specified by this option. Add accounts by specifying the `medium` and `address` of the reserved threepid (3rd party identifier).",
      "items": {
        "type": "object",
        "properties": {
          "medium": {
            "type": "string",
            "description": "Medium of the account threepid."
          },
          "address": {
            "type": "string",
            "description": "Address of the account threepid."
          }
        }
      },
      "default": [],
      "examples": [
        [
          {
            "medium": "email",
            "address": "reserved_user@example.com"
          }
        ]
      ]
    },
    "server_context": {
      "type": [
        "string",
        "null"
      ],
      "description": "This option is used by phonehome stats to group together related servers.",
      "default": null,
      "examples": [
        "context"
      ]
    },
    "limit_remote_rooms": {
      "type": "object",
      "description": "When this option is enabled, the room \"complexity\" will be checked before a user joins a new remote room. If it is above the complexity limit, the server will disallow joining, or will instantly leave. This is useful for homeservers that are resource-constrained. Room complexity is an arbitrary measure based on factors such as the number of users in the room.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether this check is enabled.",
          "default": false
        },
        "complexity": {
          "type": "number",
          "description": "The limit above which rooms cannot be joined.",
          "default": 1.0
        },
        "complexity_error": {
          "type": "string",
          "description": "Override the error which is returned when the room is too complex with a custom message.",
          "default": "Your homeserver is unable to join rooms this large or complex. Please speak to your server administrator, or upgrade your instance to join this room."
        },
        "admins_can_join": {
          "type": "boolean",
          "description": "Allow server admins to join complex rooms.",
          "default": false
        }
      },
      "examples": [
        {
          "enabled": true,
          "complexity": 0.5,
          "complexity_error": "I can't let you do that, Dave.",
          "admins_can_join": true
        }
      ]
    },
    "require_membership_for_aliases": {
      "type": "boolean",
      "description": "Whether to require a user to be in the room to add an alias to it.",
      "default": true,
      "examples": [
        false
      ]
    },
    "allow_per_room_profiles": {
      "type": "boolean",
      "description": "Whether to allow per-room membership profiles through the sending of membership events with profile information that differs from the target's global profile.",
      "default": true,
      "examples": [
        false
      ]
    },
    "max_avatar_size": {
      "oneOf": [
        {
          "$ref": "#/$defs/bytes"
        },
        {
          "type": "null"
        }
      ],
      "description": "The largest permissible file size in bytes for a user avatar. Defaults to no restriction. Use M for MB and K for KB.\n\nNote that user avatar changes will not work if this is set without using Synapse's media repository.",
      "default": null,
      "examples": [
        "10M"
      ]
    },
    "allowed_avatar_mimetypes": {
      "type": [
        "array",
        "null"
      ],
      "description": "The MIME types allowed for user avatars. Defaults to no restriction.\n\nNote that user avatar changes will not work if this is set without using Synapse's media repository.",
      "items": {
        "type": "string"
      },
      "default": null,
      "examples": [
        [
          "image/png",
          "image/jpeg",
          "image/gif"
        ]
      ]
    },
    "redaction_retention_period": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "null"
        }
      ],
      "description": "How long to keep redacted events in unredacted form in the database. After this period redacted events get replaced with their redacted form in the DB.\n\nSynapse will check whether the rentention period has concluded for redacted events every 5 minutes. Thus, even if this option is set to `0`, Synapse may still take up to 5 minutes to purge redacted events from the database. Set to `null` to disable.",
      "default": "7d",
      "examples": [
        "28d"
      ]
    },
    "forgotten_room_retention_period": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "null"
        }
      ],
      "description": "How long to keep locally forgotten rooms before purging them from the DB. A value of `null` means it's disabled.",
      "default": null,
      "examples": [
        "28d"
      ]
    },
    "user_ips_max_age": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "null"
        }
      ],
      "description": "How long to track users' last seen time and IPs in the database. Set to `null` to disable clearing out of old rows.",
      "default": "28d",
      "examples": [
        "14d"
      ]
    },
    "request_token_inhibit_3pid_errors": {
      "type": "boolean",
      "description": "Inhibits the `/requestToken` endpoints from returning an error that might leak information about whether an e-mail address is in use or not on this homeserver. Note that for some endpoints the error situation is the e-mail already being used, and for others the error is entering the e-mail being unused. If this option is enabled, instead of returning an error, these endpoints will act as if no error happened and return a fake session ID (`sid`) to clients.",
      "default": false,
      "examples": [
        true
      ]
    },
    "next_link_domain_whitelist": {
      "type": [
        "array",
        "null"
      ],
      "description": "A list of domains that the domain portion of `next_link` parameters must match.\n\nThis parameter is optionally provided by clients while requesting validation of an email or phone number, and maps to a link that users will be automatically redirected to after validation succeeds. Clients can make use this parameter to aid the validation process.\n\nThe whitelist is applied whether the homeserver or an identity server is handling validation.\n\nThe default value is no whitelist functionality; all domains are allowed. Setting this value to an empty list will instead disallow all domains.",
      "default": null,
      "examples": [
        "matrix.org"
      ]
    },
    "templates": {
      "type": "object",
      "description": "These options define templates to use when generating email or HTML page contents.\n\nSee [here](../../templates.md) for more information about using custom templates.",
      "properties": {
        "custom_template_directory": {
          "type": [
            "string",
            "null"
          ],
          "description": "Determines which directory Synapse will try to find template files in to use to generate email or HTML page contents. If not set, or a file is not found within the template directory, a default template from within the Synapse package will be used.",
          "default": null
        }
      },
      "examples": [
        {
          "custom_template_directory": "/path/to/custom/templates/"
        }
      ]
    },
    "retention": {
      "type": "object",
      "description": "This option and the associated options determine message retention policy at the server level.\n\nRoom admins and mods can define a retention period for their rooms using the `m.room.retention` state event, and server admins can cap this period by setting the `allowed_lifetime_min` and `allowed_lifetime_max` config options.\n\nIf this feature is enabled, Synapse will regularly look for and purge events which are older than the room's maximum retention period. Synapse will also filter events received over federation so that events that should have been purged are ignored and not stored again.\n\nThe message retention policies feature is disabled by default. You can read more about this feature [here](../../message_retention_policies.md).",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enforce message retention policies",
          "default": false
        },
        "default_policy": {
          "type": "object",
          "description": "Default message retention policy. If set, Synapse will apply it to rooms that lack the `m.room.retention` state event.",
          "properties": {
            "min_lifetime": {
              "oneOf": [
                {
                  "$ref": "#/$defs/duration"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Minimum message retention time of the default message retention policy. Synapse doesn't take this option into account yet.",
              "default": null
            },
            "max_lifetime": {
              "oneOf": [
                {
                  "$ref": "#/$defs/duration"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Maximum message retention time of the default message retention policy.",
              "default": null
            }
          }
        },
        "allowed_lifetime_min": {
          "oneOf": [
            {
              "$ref": "#/$defs/duration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Retention policy limit. If set, and the state of a room contains a `m.room.retention` event in its state which contains a `min_lifetime` that's beyond this bound, Synapse will cap the room's policy to these limits when running purge jobs.",
          "default": null
        },
        "allowed_lifetime_max": {
          "oneOf": [
            {
              "$ref": "#/$defs/duration"
            },
            {
              "type": "null"
            }
          ],
          "description": "Retention policy limit. If set, and the state of a room contains a `m.room.retention` event in its state which contains a `max_lifetime` that's beyond this bound, Synapse will cap the room's policy to these limits when running purge jobs.",
          "default": null
        },
        "purge_jobs": {
          "type": [
            "array",
            "null"
          ],
          "description": "Server admins can define the settings of the background jobs purging the events whose lifetime has expired under the `purge_jobs` section.\n\nIf no configuration is provided for this option, a single job will be set up to delete expired events in every room daily.\n\nEach job's configuration defines which range of message lifetimes the job takes care of. For example, if `shortest_max_lifetime` is \"2d\" and `longest_max_lifetime` is \"3d\", the job will handle purging expired events in rooms whose state defines a `max_lifetime` that's both higher than 2 days, and lower than or equal to 3 days. Both the minimum and the maximum value of a range are optional, e.g. a job with no `shortest_max_lifetime` and a `longest_max_lifetime` of \"3d\" will handle every room with a retention policy whose `max_lifetime` is lower than or equal to three days.\n\nThe rationale for this per-job configuration is that some rooms might have a retention policy with a low `max_lifetime`, where history needs to be purged of outdated messages on a more frequent basis than for the rest of the rooms (e.g. every 12h), but not want that purge to be performed by a job that's iterating over every room it knows, which could be heavy on the server.\n\nIf any purge job is configured, it is strongly recommended to have at least a single job with neither `shortest_max_lifetime` nor `longest_max_lifetime` set, or one job without `shortest_max_lifetime` and one job without `longest_max_lifetime` set. Otherwise some rooms might be ignored, even if `allowed_lifetime_min` and `allowed_lifetime_max` are set, because capping a room's policy to these values is done after the policies are retrieved from Synapse's database (which is done using the range specified in a purge job's configuration).",
          "items": {
            "type": "object",
            "properties": {
              "shortest_max_lifetime": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/duration"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Apply job to rooms that have a `max_lifetime` higher than `shortest_max_lifetime`. A value of `null` never excludes any room."
              },
              "longest_max_lifetime": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/duration"
                  },
                  {
                    "type": "null"
                  }
                ],
                "description": "Apply job to rooms that have a `max_lifetime` lower than or equal to `shortest_max_lifetime`. A value of `null` never excludes any room."
              },
              "interval": {
                "$ref": "#/$defs/duration",
                "description": "How often to run the job."
              }
            }
          },
          "default": null
        }
      },
      "examples": [
        {
          "enabled": true,
          "default_policy": {
            "min_lifetime": "1d",
            "max_lifetime": "1y"
          },
          "allowed_lifetime_min": "1d",
          "allowed_lifetime_max": "1y",
          "purge_jobs": [
            {
              "longest_max_lifetime": "3d",
              "interval": "12h"
            },
            {
              "shortest_max_lifetime": "3d",
              "interval": "1d"
            }
          ]
        }
      ]
    },
    "tls_certificate_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "This option specifies a PEM-encoded X509 certificate for TLS. This certificate, as of Synapse 1.0, will need to be a valid and verifiable certificate, signed by a recognised Certificate Authority.\n\nBe sure to use a `.pem` file that includes the full certificate chain including any intermediate certificates (for instance, if using certbot, use `fullchain.pem` as your certificate, not `cert.pem`).",
      "default": null,
      "examples": [
        "CONFDIR/SERVERNAME.tls.crt"
      ]
    },
    "tls_private_key_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "PEM-encoded private key for TLS.",
      "default": null,
      "examples": [
        "CONFDIR/SERVERNAME.tls.key"
      ]
    },
    "federation_verify_certificates": {
      "type": "boolean",
      "description": "Whether to verify TLS server certificates for outbound federation requests. To disable certificate verification, set the option to false.",
      "default": true,
      "examples": [
        false
      ]
    },
    "federation_client_minimum_tls_version": {
      "type": "string",
      "description": "The minimum TLS version that will be used for outbound federation requests.\n\nConfigurable to `\"1\"`, `\"1.1\"`, `\"1.2\"`, or `\"1.3\"`. Note that setting this value higher than `\"1.2\"` will prevent federation to most of the public Matrix network: only configure it to `\"1.3\"` if you have an entirely private federation setup and you can ensure TLS 1.3 support.",
      "default": "1",
      "examples": [
        "1.2"
      ]
    },
    "federation_certificate_verification_whitelist": {
      "type": "array",
      "description": "Skip federation certificate verification on a given whitelist of domains.\n\nThis setting should only be used in very specific cases, such as federation over Tor hidden services and similar. For private networks of homeservers, you likely want to use a private CA instead.\n\nOnly effective if `federation_verify_certificates` is `true`.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "lon.example.com",
          "*.domain.com",
          "*.onion"
        ]
      ]
    },
    "federation_custom_ca_list": {
      "type": "array",
      "description": "List of custom certificate authorities for federation traffic.\n\nThis setting should only normally be used within a private network of homeservers.\n\nNote that this list will replace those that are provided by your operating environment. Certificates must be in PEM format.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "myCA1.pem",
          "myCA2.pem",
          "myCA3.pem"
        ]
      ]
    },
    "federation_domain_whitelist": {
      "type": "array",
      "description": "Restrict federation to the given whitelist of domains. N.B. we recommend also firewalling your federation listener to limit inbound federation traffic as early as possible, rather than relying purely on this application-layer restriction. If not specified, the default is to whitelist everything.\n\nNote: this does not stop a server from joining rooms that servers not on the whitelist are in. As such, this option is really only useful to establish a \"private federation\", where a group of servers all whitelist each other and have the same whitelist.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "lon.example.com",
          "nyc.example.com",
          "syd.example.com"
        ]
      ]
    },
    "federation_whitelist_endpoint_enabled": {
      "type": "boolean",
      "description": "Enables an endpoint for fetching the federation whitelist config.\n\nThe request method and path is `GET /_synapse/client/v1/config/federation_whitelist`, and the response format is:\n\n```json\n{\n    \"whitelist_enabled\": true,  // Whether the federation whitelist is being enforced\n    \"whitelist\": [  // Which server names are allowed by the whitelist\n        \"example.com\"\n    ]\n}\n```\n\nIf `whitelist_enabled` is `false` then the server is permitted to federate with all others.\n\nThe endpoint requires authentication.",
      "default": false,
      "examples": [
        true
      ]
    },
    "federation_metrics_domains": {
      "type": "array",
      "description": "Report prometheus metrics on the age of PDUs being sent to and received from the given domains. This can be used to give an idea of \"delay\" on inbound and outbound federation, though be aware that any delay can be due to problems at either end or with the intermediate network.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "matrix.org",
          "example.com"
        ]
      ]
    },
    "allow_profile_lookup_over_federation": {
      "type": "boolean",
      "description": "Set to false to disable profile lookup over federation. By default, the Federation API allows other homeservers to obtain profile data of any user on this homeserver.",
      "default": true,
      "examples": [
        false
      ]
    },
    "allow_device_name_lookup_over_federation": {
      "type": "boolean",
      "description": "Set this option to true to allow device display name lookup over federation. By default, the Federation API prevents other homeservers from obtaining the display names of any user devices on this homeserver.",
      "default": false,
      "examples": [
        true
      ]
    },
    "federation": {
      "type": "object",
      "description": "The federation section defines some sub-options related to federation.\n\nThe following options are related to configuring timeout and retry logic for one request, independently of the others. Short retry algorithm is used when something or someone will wait for the request to have an answer, while long retry is used for requests that happen in the background, like sending a federation transaction.\n\n`destination_*` options control the retry logic when communicating with a specific homeserver destination. Unlike the previous configuration options, these values apply across all requests for a given destination and the state of the backoff is stored in the database.",
      "properties": {
        "client_timeout": {
          "$ref": "#/$defs/duration",
          "description": "Timeout for the federation requests.",
          "default": "60s"
        },
        "max_short_retry_delay": {
          "$ref": "#/$defs/duration",
          "description": "Maximum delay to be used for the short retry algo.",
          "default": "2s"
        },
        "max_long_retry_delay": {
          "$ref": "#/$defs/duration",
          "description": "Maximum delay to be used for the long retry algo.",
          "default": "60s"
        },
        "max_short_retries": {
          "type": "integer",
          "description": "Maximum number of retries for the short retry algo.",
          "default": 3
        },
        "max_long_retries": {
          "type": "integer",
          "description": "Maximum number of retries for the long retry algo.",
          "default": 10
        },
        "destination_min_retry_interval": {
          "$ref": "#/$defs/duration",
          "description": "The initial backoff, after the first request fails.",
          "default": "10m"
        },
        "destination_retry_multiplier": {
          "type": "integer",
          "description": "How much we multiply the backoff by after each subsequent fail.",
          "default": 2
        },
        "destination_max_retry_interval": {
          "$ref": "#/$defs/duration",
          "description": "A cap on the backoff.",
          "default": "1w"
        }
      },
      "examples": [
        {
          "client_timeout": "180s",
          "max_short_retry_delay": "7s",
          "max_long_retry_delay": "100s",
          "max_short_retries": 5,
          "max_long_retries": 20,
          "destination_min_retry_interval": "30s",
          "destination_retry_multiplier": 5,
          "destination_max_retry_interval": "12h"
        }
      ]
    },
    "event_cache_size": {
      "$ref": "#/$defs/size",
      "description": "The number of events to cache in memory. Defaults to 10K. Like other caches, this is affected by `caches.global_factor` (see below).\n\nFor example, the default is 10K and the global_factor default is 0.5.\n\nSince 10K * 0.5 is 5K then the event cache size will be 5K.\n\nThe cache affected by this configuration is named as \"\\*getEvent\\*\".\n\nNote that this option is not part of the `caches` section.",
      "default": "10K",
      "examples": [
        "15K"
      ]
    },
    "caches": {
      "type": "object",
      "description": "A cache \"factor\" is a multiplier that can be applied to each of Synapse's caches in order to increase or decrease the maximum number of entries that can be stored.",
      "io.element.post_description": "### Reloading cache factors\n\nThe cache factors (i.e. `caches.global_factor` and `caches.per_cache_factors`)  may be reloaded at any time by sending a [`SIGHUP`](https://en.wikipedia.org/wiki/SIGHUP) signal to Synapse using e.g.\n\n```commandline\nkill -HUP [PID_OF_SYNAPSE_PROCESS]\n```\n\nIf you are running multiple workers, you must individually update the worker config file and send this signal to each worker process.\n\nIf you're using the [example systemd service](https://github.com/element-hq/synapse/blob/develop/contrib/systemd/matrix-synapse.service) file in Synapse's `contrib` directory, you can send a `SIGHUP` signal by using `systemctl reload matrix-synapse`.",
      "properties": {
        "global_factor": {
          "type": "number",
          "description": "Controls the global cache factor, which is the default cache factor for all caches if a specific factor for that cache is not otherwise set.\n\nThis can also be set by the `SYNAPSE_CACHE_FACTOR` environment variable. Setting by environment variable takes priority over setting through the config file.\n\nDefaults to 0.5, which will halve the size of all caches.\n\nNote that changing this value also affects the HTTP connection pool.",
          "default": 0.5
        },
        "per_cache_factors": {
          "type": "object",
          "description": "A dictionary of cache name to cache factor for that individual cache. Overrides the global cache factor for a given cache.\n\nThese can also be set through environment variables comprised of `SYNAPSE_CACHE_FACTOR_` + the name of the cache in capital letters and underscores. Setting by environment variable takes priority over setting through the config file. Ex. `SYNAPSE_CACHE_FACTOR_GET_USERS_WHO_SHARE_ROOM_WITH_USER=2.0`\n\nSome caches have '*' and other characters that are not alphanumeric or underscores. These caches can be named with or without the special characters stripped. For example, to specify the cache factor for `*stateGroupCache*` via an environment variable would be `SYNAPSE_CACHE_FACTOR_STATEGROUPCACHE=2.0`.",
          "additionalProperties": {
            "type": "number"
          },
          "default": {}
        },
        "expire_caches": {
          "type": "boolean",
          "description": "Controls whether cache entries are evicted after a specified time period. Set to false to disable this feature. Note that never expiring caches may result in excessive memory usage.",
          "default": true
        },
        "cache_entry_ttl": {
          "$ref": "#/$defs/duration",
          "description": "If `expire_caches` is enabled, this flag controls how long an entry can be in a cache without having been accessed before being evicted.",
          "default": "30m"
        },
        "sync_response_cache_duration": {
          "$ref": "#/$defs/duration",
          "description": "Controls how long the results of a /sync request are cached for after a successful response is returned. A higher duration can help clients with intermittent connections, at the cost of higher memory usage. A value of zero means that sync responses are not cached.\n\n*Changed in Synapse 1.62.0*: The default was changed from 0 to 2m.",
          "default": "2m"
        },
        "cache_autotuning": {
          "type": "object",
          "description": "`cache_autotuning` and its sub-options `max_cache_memory_usage`, `target_cache_memory_usage`, and `min_cache_ttl` work in conjunction with each other to maintain a balance between cache memory usage and cache entry availability. You must be using [jemalloc](../administration/admin_faq.md#help-synapse-is-slow-and-eats-all-my-ramcpu) to utilize this option, and all three of the options must be specified for this feature to work. This option defaults to off, enable it by providing values for the sub-options listed below. Please note that the feature will not work and may cause unstable behavior (such as excessive emptying of caches or exceptions) if all of the values are not provided. Please see the [Config Conventions](#config-conventions) for information on how to specify memory size and cache expiry durations.",
          "properties": {
            "max_cache_memory_usage": {
              "oneOf": [
                {
                  "$ref": "#/$defs/duration"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sets a ceiling on how much memory the cache can use before caches begin to be continuously evicted. They will continue to be evicted until the memory usage drops below the `target_cache_memory_usage`, set in the setting below, or until the `min_cache_ttl` is hit.",
              "default": null
            },
            "target_cache_memory_usage": {
              "oneOf": [
                {
                  "$ref": "#/$defs/bytes"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sets a rough target for the desired memory usage of the caches.",
              "default": null
            },
            "min_cache_ttl": {
              "oneOf": [
                {
                  "$ref": "#/$defs/duration"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sets a limit under which newer cache entries are not evicted and is only applied when caches are actively being evicted/`max_cache_memory_usage` has been exceeded. This is to protect hot caches from being emptied while Synapse is evicting due to memory.",
              "default": null
            }
          }
        }
      },
      "examples": [
        {
          "global_factor": 1.0,
          "per_cache_factors": {
            "get_users_who_share_room_with_user": 2.0
          },
          "sync_response_cache_duration": "2m",
          "cache_autotuning": {
            "max_cache_memory_usage": "1024M",
            "target_cache_memory_usage": "758M",
            "min_cache_ttl": "5m"
          }
        }
      ]
    },
    "database": {
      "$ref": "#/$defs/database",
      "examples": [
        {
          "name": "sqlite3",
          "args": {
            "database": "/path/to/homeserver.db"
          }
        },
        {
          "name": "psycopg2",
          "txn_limit": 10000,
          "args": {
            "user": "synapse_user",
            "password": "secretpassword",
            "dbname": "synapse",
            "host": "localhost",
            "port": 5432,
            "cp_min": 5,
            "cp_max": 10
          }
        }
      ]
    },
    "databases": {
      "type": "object",
      "description": "The `databases` option allows specifying a mapping between certain database tables and database host details, spreading the load of a single Synapse instance across multiple database backends. This is often referred to as \"database sharding\". This option is only supported for PostgreSQL database backends.\n\n**Important note:** This is a supported option, but is not currently used in production by the Matrix.org Foundation. Proceed with caution and always make backups.\n\n`databases` is a dictionary of arbitrarily-named database entries. Each entry is equivalent to the value of the `database` homeserver config option (see above), with the addition of a `data_stores` key. `data_stores` is an array of strings that specifies the data store(s) (a defined label for a set of tables) that should be stored on the associated database backend entry.\n\nThe currently defined values for `data_stores` are:\n\n* `\"state\"`: Database that relates to state groups will be stored in this database.\n\n  Specifically, that means the following tables:\n  * `state_groups`\n  * `state_group_edges`\n  * `state_groups_state`\n\n  And the following sequences:\n  * `state_groups_seq_id`\n\n* `\"main\"`: All other database tables and sequences.\n\nAll databases will end up with additional tables used for tracking database schema migrations and any pending background updates. Synapse will create these automatically on startup when checking for and/or performing database schema migrations.\n\nTo migrate an existing database configuration (e.g. all tables on a single database) to a different configuration (e.g. the \"main\" data store on one database, and \"state\" on another), do the following:\n\n1. Take a backup of your existing database. Things can and do go wrong and database corruption is no joke!\n2. Ensure all pending database migrations have been applied and background updates have run. The simplest way to do this is to use the `update_synapse_database` script supplied with your Synapse installation.\n\n   ```sh\n   update_synapse_database --database-config homeserver.yaml --run-background-updates\n   ```\n\n3. Copy over the necessary tables and sequences from one database to the other. Tables relating to database migrations, schemas, schema versions and background updates should **not** be copied.\n\n   As an example, say that you'd like to split out the \"state\" data store from an existing database which currently contains all data stores.\n\n   Simply copy the tables and sequences defined above for the \"state\" datastore from the existing database to the secondary database. As noted above, additional tables will be created in the secondary database when Synapse is started.\n\n4. Modify/create the `databases` option in your `homeserver.yaml` to match the desired database configuration.\n5. Start Synapse. Check that it starts up successfully and that things generally seem to be working.\n6. Drop the old tables that were copied in step 3.\n\nOnly one of the options `database` or `databases` may be specified in your config, but not both.",
      "additionalProperties": {
        "$ref": "#/$defs/database",
        "properties": {
          "data_stores": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "state",
                "main"
              ]
            }
          }
        }
      },
      "default": {},
      "examples": [
        {
          "basement_box": {
            "name": "psycopg2",
            "txn_limit": 10000,
            "data_stores": [
              "main"
            ],
            "args": {
              "user": "synapse_user",
              "password": "secretpassword",
              "dbname": "synapse_main",
              "host": "localhost",
              "port": 5432,
              "cp_min": 5,
              "cp_max": 10
            }
          },
          "my_other_database": {
            "name": "psycopg2",
            "txn_limit": 10000,
            "data_stores": [
              "state"
            ],
            "args": {
              "user": "synapse_user",
              "password": "secretpassword",
              "dbname": "synapse_state",
              "host": "localhost",
              "port": 5432,
              "cp_min": 5,
              "cp_max": 10
            }
          }
        }
      ]
    },
    "log_config": {
      "type": [
        "string",
        "null"
      ],
      "description": "This option specifies a yaml python logging config file as described [here](https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema).",
      "default": null,
      "examples": [
        "CONFDIR/SERVERNAME.log.config"
      ]
    },
    "rc_message": {
      "$ref": "#/$defs/rc",
      "description": "Ratelimiting settings for client messaging.\n\nThis is a ratelimiting option for messages that ratelimits sending based on the account the client is using.",
      "default": {
        "per_second": 0.2,
        "burst_count": 10.0
      },
      "examples": [
        {
          "per_second": 0.5,
          "burst_count": 15.0
        }
      ]
    },
    "rc_registration": {
      "$ref": "#/$defs/rc",
      "description": "This option ratelimits registration requests based on the client's IP address.",
      "default": {
        "per_second": 0.17,
        "burst_count": 3.0
      },
      "examples": [
        {
          "per_second": 0.15,
          "burst_count": 2.0
        }
      ]
    },
    "rc_registration_token_validity": {
      "$ref": "#/$defs/rc",
      "description": "This option checks the validity of registration tokens that ratelimits requests based on the client's IP address.",
      "default": {
        "per_second": 0.1,
        "burst_count": 5.0
      },
      "examples": [
        {
          "per_second": 0.3,
          "burst_count": 6.0
        }
      ]
    },
    "rc_login": {
      "type": "object",
      "description": "This option specifies several limits for login.",
      "properties": {
        "address": {
          "$ref": "#/$defs/rc",
          "description": "Ratelimits login requests based on the client's IP address.",
          "default": {
            "per_second": 0.003,
            "burst_count": 5.0
          }
        },
        "account": {
          "$ref": "#/$defs/rc",
          "description": "Ratelimits login requests based on the account the client is attempting to log into.",
          "default": {
            "per_second": 0.003,
            "burst_count": 5.0
          }
        },
        "failed_attempts": {
          "$ref": "#/$defs/rc",
          "description": "Ratelimits login requests based on the account the client is attempting to log into, based on the amount of failed login attempts for this account.",
          "default": {
            "per_second": 0.17,
            "burst_count": 3.0
          }
        }
      },
      "examples": [
        {
          "address": {
            "per_second": 0.15,
            "burst_count": 5.0
          },
          "account": {
            "per_second": 0.18,
            "burst_count": 4.0
          },
          "failed_attempts": {
            "per_second": 0.19,
            "burst_count": 7.0
          }
        }
      ]
    },
    "rc_admin_redaction": {
      "$ref": "#/$defs/rc",
      "description": "This option sets ratelimiting redactions by room admins. If this is not explicitly set then it uses the same ratelimiting as per `rc_message`. This is useful to allow room admins to deal with abuse quickly.",
      "examples": [
        {
          "per_second": 1.0,
          "burst_count": 50.0
        }
      ]
    },
    "rc_joins": {
      "type": "object",
      "description": "This option allows for ratelimiting number of rooms a user can join.",
      "properties": {
        "local": {
          "$ref": "#/$defs/rc",
          "description": "Ratelimits when users are joining rooms the server is already in.",
          "default": {
            "per_second": 0.1,
            "burst_count": 10.0
          }
        },
        "remote": {
          "$ref": "#/$defs/rc",
          "description": "Ratelimits when users are trying to join rooms not on the server (which can be more computationally expensive than restricting locally).",
          "default": {
            "per_second": 0.01,
            "burst_count": 10.0
          }
        }
      },
      "examples": [
        {
          "local": {
            "per_second": 0.2,
            "burst_count": 15.0
          },
          "remote": {
            "per_second": 0.03,
            "burst_count": 12.0
          }
        }
      ]
    },
    "rc_joins_per_room": {
      "$ref": "#/$defs/rc",
      "description": "This option allows admins to ratelimit joins to a room based on the number of recent joins (local or remote) to that room. It is intended to mitigate mass-join spam waves which target multiple homeservers.\n\n_Added in Synapse 1.64.0._",
      "default": {
        "per_second": 1.0,
        "burst_count": 10.0
      },
      "examples": [
        {
          "per_second": 1.0,
          "burst_count": 10.0
        }
      ]
    },
    "rc_3pid_validation": {
      "$ref": "#/$defs/rc",
      "description": "This option ratelimits how often a user or IP can attempt to validate a 3PID.",
      "default": {
        "per_second": 0.003,
        "burst_count": 5.0
      },
      "examples": [
        {
          "per_second": 0.003,
          "burst_count": 5.0
        }
      ]
    },
    "rc_invites": {
      "type": "object",
      "description": "This option sets ratelimiting how often invites can be sent in a room or to a specific user.\n\nClient requests that invite user(s) when [creating a room](https://spec.matrix.org/v1.2/client-server-api/#post_matrixclientv3createroom) will count against the `rc_invites.per_room` limit, whereas client requests to [invite a single user to a room](https://spec.matrix.org/v1.2/client-server-api/#post_matrixclientv3roomsroomidinvite) will count against both the `rc_invites.per_user` and `rc_invites.per_room` limits.\n\nFederation requests to invite a user will count against the `rc_invites.per_user` limit only, as Synapse presumes ratelimiting by room will be done by the sending server.\n\n_Changed in version 1.63:_ added the `per_issuer` limit.",
      "properties": {
        "per_room": {
          "$ref": "#/$defs/rc",
          "description": "Applies to the room of the invitation.",
          "default": {
            "per_second": 0.3,
            "burst_count": 10.0
          }
        },
        "per_user": {
          "$ref": "#/$defs/rc",
          "description": "Applies to the *receiver* of the invite, rather than the sender, meaning that a `rc_invite.per_user.burst_count` of 5 mandates that a single user cannot *receive* more than a burst of 5 invites at a time.",
          "default": {
            "per_second": 0.003,
            "burst_count": 5.0
          }
        },
        "per_issuer": {
          "$ref": "#/$defs/rc",
          "description": "Applies to the *issuer* of the invite, meaning that a `rc_invite.per_issuer.burst_count` of 5 mandates that single user cannot *send* more than a burst of 5 invites at a time.",
          "default": {
            "per_second": 0.3,
            "burst_count": 10.0
          }
        }
      },
      "examples": [
        {
          "per_room": {
            "per_second": 0.5,
            "burst_count": 5.0
          },
          "per_user": {
            "per_second": 0.004,
            "burst_count": 3.0
          },
          "per_issuer": {
            "per_second": 0.5,
            "burst_count": 5.0
          }
        }
      ]
    },
    "rc_third_party_invite": {
      "$ref": "#/$defs/rc",
      "description": "This option ratelimits 3PID invites (i.e. invites sent to a third-party ID such as an email address or a phone number) based on the account that's sending the invite.",
      "default": {
        "per_second": 0.2,
        "burst_count": 10.0
      }
    },
    "rc_media_create": {
      "$ref": "#/$defs/rc",
      "description": "This option ratelimits creation of MXC URIs via the `/_matrix/media/v1/create` endpoint based on the account that's creating the media.",
      "default": {
        "per_second": 10.0,
        "burst_count": 50.0
      }
    },
    "rc_federation": {
      "type": "object",
      "description": "Defines limits on federation requests.",
      "properties": {
        "window_size": {
          "type": "integer",
          "description": "Window size in milliseconds.",
          "default": 1000
        },
        "sleep_limit": {
          "type": "integer",
          "description": "Number of federation requests from a single server in a window before the server will delay processing the request.",
          "default": 10
        },
        "sleep_delay": {
          "type": "integer",
          "description": "Duration in milliseconds to delay processing events from remote servers by if they go over the sleep limit.",
          "default": 500
        },
        "reject_limit": {
          "type": "integer",
          "description": "Maximum number of concurrent federation requests allowed from a single server.",
          "default": 50
        },
        "concurrent": {
          "type": "integer",
          "description": "Number of federation requests to concurrently process from a single server.",
          "default": 3
        }
      },
      "examples": [
        {
          "window_size": 750,
          "sleep_limit": 15,
          "sleep_delay": 400,
          "reject_limit": 40,
          "concurrent": 5
        }
      ]
    },
    "rc_presence": {
      "type": "object",
      "description": "This option sets ratelimiting for presence.",
      "properties": {
        "per_user": {
          "$ref": "#/$defs/rc",
          "description": "Sets rate limits on how often a specific users' presence updates are evaluated. Ratelimited presence updates sent via sync are ignored, and no error is returned to the client. This option also sets the rate limit for the [`PUT /_matrix/client/v3/presence/{userId}/status`] endpoint.\n\n[`PUT /_matrix/client/v3/presence/{userId}/status`]:\n  <https://spec.matrix.org/latest/client-server-api/#put_matrixclientv3presenceuseridstatus>"
        }
      },
      "default": {
        "per_user": {
          "per_second": 0.1,
          "burst_count": 1.0
        }
      },
      "examples": [
        {
          "per_user": {
            "per_second": 0.05,
            "burst_count": 1.0
          }
        }
      ]
    },
    "rc_delayed_event_mgmt": {
      "$ref": "#/$defs/rc",
      "description": "Ratelimiting settings for delayed event management.\n\nThis is a ratelimiting option that ratelimits attempts to restart, cancel, or view delayed events based on the sending client's account and device ID.\n\nAttempts to create or send delayed events are ratelimited not by this setting, but by `rc_message`.\n\nSetting this to a high value allows clients to make delayed event management requests often (such as repeatedly restarting a delayed event with a short timeout, or restarting several different delayed events all at once) without the risk of being ratelimited.",
      "default": {
        "per_second": 1.0,
        "burst_count": 5.0
      },
      "examples": [
        {
          "per_second": 2.0,
          "burst_count": 20.0
        }
      ]
    },
    "rc_reports": {
      "$ref": "#/$defs/rc",
      "description": "Ratelimiting settings for reporting content.\nThis is a ratelimiting option that ratelimits reports made by users about content they see.\nSetting this to a high value allows users to report content quickly, possibly in duplicate. This can result in higher database usage.",
      "default": {
        "per_user": {
          "per_second": 1.0,
          "burst_count": 5.0
        }
      },
      "examples": [
        {
          "per_second": 2.0,
          "burst_count": 20.0
        }
      ]
    },
    "rc_room_creation": {
      "$ref": "#/$defs/rc",
      "description": "Sets rate limits for how often users are able to create rooms.",
      "default": {
        "per_user": {
          "per_second": 0.016,
          "burst_count": 10.0
        }
      },
      "examples": [
        {
          "per_second": 1.0,
          "burst_count": 5.0
        }
      ]
    },
    "federation_rr_transactions_per_room_per_second": {
      "type": "integer",
      "description": "Sets outgoing federation transaction frequency for sending read-receipts, per-room.\n\nIf we end up trying to send out more read-receipts, they will get buffered up into fewer transactions.",
      "default": 50,
      "examples": [
        40
      ]
    },
    "enable_authenticated_media": {
      "type": "boolean",
      "description": "When set to true, all subsequent media uploads will be marked as authenticated, and will not be available over legacy unauthenticated media endpoints (`/_matrix/media/(r0|v3|v1)/download` and `/_matrix/media/(r0|v3|v1)/thumbnail`) – requests for authenticated media over these endpoints will result in a 404. All media, including authenticated media, will be available over the authenticated media endpoints `_matrix/client/v1/media/download` and `_matrix/client/v1/media/thumbnail`. Media uploaded prior to setting this option to true will still be available over the legacy endpoints. Note if the setting is switched to false after enabling, media marked as authenticated will be available over legacy endpoints. Defaults to true (previously false). In a future release of Synapse, this option will be removed and become always-on.\n\nIn all cases, authenticated requests to download media will succeed, but for unauthenticated requests, this case-by-case breakdown describes whether media downloads are permitted:\n\n* `enable_authenticated_media = False`:\n  * unauthenticated client or homeserver requesting local media: allowed\n  * unauthenticated client or homeserver requesting remote media: allowed as long as the media is in the cache, or as long as the remote homeserver does not require authentication to retrieve the media\n* `enable_authenticated_media = True`:\n  * unauthenticated client or homeserver requesting local media: allowed if the media was stored on the server whilst `enable_authenticated_media` was `False` (or in a previous Synapse version where this option did not exist); otherwise denied.\n  * unauthenticated client or homeserver requesting remote media: the same as for local media; allowed if the media was stored on the server whilst `enable_authenticated_media` was `False` (or in a previous Synapse version where this option did not exist); otherwise denied.\n\nIt is especially notable that media downloaded before this option existed (in older Synapse versions), or whilst this option was set to `False`, will perpetually be available over the legacy, unauthenticated endpoint, even after this option is set to `True`. This is for backwards compatibility with older clients and homeservers that do not yet support requesting authenticated media; those older clients or homeservers will not be cut off from media they can already see.\n\n_Changed in Synapse 1.120:_ This option now defaults to `True` when not set, whereas before this version it defaulted to `False`.",
      "default": true,
      "examples": [
        false
      ]
    },
    "enable_media_repo": {
      "type": "boolean",
      "description": "Enable the media store service in the Synapse master. Set to false if you are using a separate media store worker.",
      "default": true,
      "examples": [
        false
      ]
    },
    "media_store_path": {
      "type": "string",
      "description": "Directory where uploaded images and attachments are stored.",
      "default": "media_store",
      "examples": [
        "DATADIR/media_store"
      ]
    },
    "max_pending_media_uploads": {
      "type": "integer",
      "description": "How many *pending media uploads* can a given user have? A pending media upload is a created MXC URI that (a) is not expired (the `unused_expires_at` timestamp has not passed) and (b) the media has not yet been uploaded for.",
      "default": 5,
      "examples": [
        5
      ]
    },
    "unused_expiration_time": {
      "$ref": "#/$defs/duration",
      "description": "How long to wait in milliseconds before expiring created media IDs.",
      "default": "24h",
      "examples": [
        "1h"
      ]
    },
    "media_storage_providers": {
      "type": "array",
      "description": "Media storage providers allow media to be stored in different locations.",
      "items": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Type of resource, e.g. `file_system`."
          },
          "store_local": {
            "type": "boolean",
            "description": "Whether to store newly uploaded local files."
          },
          "store_remote": {
            "type": "boolean",
            "description": "Whether to store newly downloaded local files."
          },
          "store_synchronous": {
            "type": "boolean",
            "description": "Whether to wait for successful storage for local uploads."
          },
          "config": {
            "type": "object",
            "description": "Sets a path to the resource through the `directory` option.",
            "properties": {
              "directory": {
                "type": "string",
                "description": "Path to the resource."
              }
            }
          }
        }
      },
      "default": [],
      "examples": [
        [
          {
            "module": "file_system",
            "store_local": false,
            "store_remote": false,
            "store_synchronous": false,
            "config": {
              "directory": "/mnt/some/other/directory"
            }
          }
        ]
      ]
    },
    "max_upload_size": {
      "$ref": "#/$defs/bytes",
      "description": "The largest allowed upload size in bytes.\n\nIf you are using a reverse proxy you may also need to set this value in your reverse proxy's config. Notably Nginx has a small max body size by default. See [here](../../reverse_proxy.md) for more on using a reverse proxy with Synapse.",
      "default": "50M",
      "examples": [
        "60M"
      ]
    },
    "media_upload_limits": {
      "type": "array",
      "description": "A list of media upload limits defining how much data a given user can upload in a given time period.\n\nAn empty list means no limits are applied.",
      "default": [],
      "items": {
        "time_period": {
          "type": "#/$defs/duration",
          "description": "The time period over which the limit applies. Required."
        },
        "max_size": {
          "type": "#/$defs/bytes",
          "description": "Amount of data that can be uploaded in the time period by the user. Required."
        }
      },
      "examples": [
        [
          {
            "time_period": "1h",
            "max_size": "100M"
          },
          {
            "time_period": "1w",
            "max_size": "500M"
          }
        ]
      ]
    },
    "max_image_pixels": {
      "$ref": "#/$defs/bytes",
      "description": "Maximum number of pixels that will be thumbnailed.",
      "default": "32M",
      "examples": [
        "35M"
      ]
    },
    "remote_media_download_burst_count": {
      "$ref": "#/$defs/bytes",
      "description": "Remote media downloads are ratelimited using a [leaky bucket algorithm](https://en.wikipedia.org/wiki/Leaky_bucket), where a given \"bucket\" is keyed to the IP address of the requester when requesting remote media downloads. This configuration option sets the size of the bucket against which the size in bytes of downloads are penalized – if the bucket is full, i.e. a given number of bytes have already been downloaded, further downloads will be denied until the bucket drains. See also `remote_media_download_per_second` which determines the rate at which the \"bucket\" is emptied and thus has available space to authorize new requests.",
      "default": "500MiB",
      "examples": [
        "200M"
      ]
    },
    "remote_media_download_per_second": {
      "$ref": "#/$defs/bytes",
      "description": "Works in conjunction with `remote_media_download_burst_count` to ratelimit remote media downloads – this configuration option determines the rate at which the \"bucket\" (see above) leaks in bytes per second. As requests are made to download remote media, the size of those requests in bytes is added to the bucket, and once the bucket has reached it's capacity, no more requests will be allowed until a number of bytes has \"drained\" from the bucket. This setting determines the rate at which bytes drain from the bucket, with the practical effect that the larger the number, the faster the bucket leaks, allowing for more bytes downloaded over a shorter period of time. Defaults to 87KiB per second. See also `remote_media_download_burst_count`.",
      "default": "87KiB",
      "examples": [
        "40K"
      ]
    },
    "prevent_media_downloads_from": {
      "type": "array",
      "description": "A list of domains to never download media from. Media from these domains that is already downloaded will not be deleted, but will be inaccessible to users. This option does not affect admin APIs trying to download/operate on media.\n\nThis will not prevent the listed domains from accessing media themselves. It simply prevents users on this server from downloading media originating from the listed servers.\n\nThis will have no effect on media originating from the local server. This only affects media downloaded from other Matrix servers, to control URL previews see [`url_preview_ip_range_blacklist`](#url_preview_ip_range_blacklist) or [`url_preview_url_blacklist`](#url_preview_url_blacklist).",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "evil.example.org",
          "evil2.example.org"
        ]
      ]
    },
    "dynamic_thumbnails": {
      "type": "boolean",
      "description": "Whether to generate new thumbnails on the fly to precisely match the resolution requested by the client. If true then whenever a new resolution is requested by the client the server will generate a new thumbnail. If false the server will pick a thumbnail from a precalculated list.",
      "default": false,
      "examples": [
        true
      ]
    },
    "thumbnail_sizes": {
      "type": "array",
      "description": "List of thumbnails to precalculate when an image is uploaded.",
      "items": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "description": "Width of the generated thumbnail."
          },
          "height": {
            "type": "integer",
            "description": "Height of the generated thumbnail."
          },
          "method": {
            "type": "string",
            "enum": [
              "crop",
              "scale"
            ],
            "description": "Method to fit the thumbnail dimensions. Current options are `crop` and `scale`."
          }
        }
      },
      "default": [
        {
          "width": 32,
          "height": 32,
          "method": "crop"
        },
        {
          "width": 96,
          "height": 96,
          "method": "crop"
        },
        {
          "width": 320,
          "height": 240,
          "method": "scale"
        },
        {
          "width": 640,
          "height": 480,
          "method": "scale"
        },
        {
          "width": 800,
          "height": 600,
          "method": "scale"
        }
      ]
    },
    "media_retention": {
      "type": "object",
      "description": "Controls whether local media and entries in the remote media cache (media that is downloaded from other homeservers) should be removed under certain conditions, typically for the purpose of saving space.\n\nPurging media files will be the carried out by the media worker (that is, the worker that has the `enable_media_repo` homeserver config option set to `true`). This may be the main process.\n\nThe `media_retention.local_media_lifetime` and `media_retention.remote_media_lifetime` config options control whether media will be purged if it has not been accessed in a given amount of time. Note that media is \"accessed\" when loaded in a room in a client, or otherwise downloaded by a local or remote user. If the media has never been accessed, the media's creation time is used instead. Both thumbnails and the original media will be removed. If either of these options are unset, then media of that type will not be purged.\n\nLocal or cached remote media that has been [quarantined](../../admin_api/media_admin_api.md#quarantining-media-in-a-room) will not be deleted. Similarly, local media that has been marked as [protected from quarantine](../../admin_api/media_admin_api.md#protecting-media-from-being-quarantined) will not be deleted.",
      "properties": {
        "local_media_lifetime": {
          "description": "Duration without access to a local media resource after which it will be purged. If the media has never been accessed, the media's creation time is used instead. Both thumbnails and the original media will be removed. If unset or null, local media will not be purged.",
          "oneOf": [
            {
              "$ref": "#/$defs/duration"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        },
        "remote_media_lifetime": {
          "description": "Duration without access to a remote media resource after which it will be purged. If the media has never been accessed, the media's creation time is used instead. Both thumbnails and the original media will be removed. If unset or null, remote media will not be purged.",
          "oneOf": [
            {
              "$ref": "#/$defs/duration"
            },
            {
              "type": "null"
            }
          ],
          "default": null
        }
      },
      "examples": [
        {
          "local_media_lifetime": "90d",
          "remote_media_lifetime": "14d"
        }
      ]
    },
    "url_preview_enabled": {
      "type": "boolean",
      "description": "This setting determines whether the preview URL API is enabled. Set to true to enable. If enabled you must specify a `url_preview_ip_range_blacklist` blacklist.",
      "default": false,
      "examples": [
        true
      ]
    },
    "url_preview_ip_range_blacklist": {
      "type": [
        "array",
        "null"
      ],
      "description": "List of IP address CIDR ranges that the URL preview spider is denied from accessing. There are no defaults: you must explicitly specify a list for URL previewing to work. You should specify any internal services in your network that you do not want synapse to try to connect to, otherwise anyone in any Matrix room could cause your synapse to issue arbitrary GET requests to your internal services, causing serious security issues.\n\n(0.0.0.0 and :: are always blacklisted, whether or not they are explicitly listed here, since they correspond to unroutable addresses.)\n\nThis must be specified if `url_preview_enabled` is set. It is recommended that you use the following example list as a starting point.\n\nNote: The value is ignored when an HTTP proxy is in use.",
      "items": {
        "type": "string"
      },
      "default": null,
      "examples": [
        [
          "127.0.0.0/8",
          "10.0.0.0/8",
          "172.16.0.0/12",
          "192.168.0.0/16",
          "100.64.0.0/10",
          "192.0.0.0/24",
          "169.254.0.0/16",
          "192.88.99.0/24",
          "198.18.0.0/15",
          "192.0.2.0/24",
          "198.51.100.0/24",
          "203.0.113.0/24",
          "224.0.0.0/4",
          "::1/128",
          "fe80::/10",
          "fc00::/7",
          "2001:db8::/32",
          "ff00::/8",
          "fec0::/10"
        ]
      ]
    },
    "url_preview_ip_range_whitelist": {
      "type": "array",
      "description": "This option sets a list of IP address CIDR ranges that the URL preview spider is allowed to access even if they are specified in `url_preview_ip_range_blacklist`. This is useful for specifying exceptions to wide-ranging blacklisted target IP ranges – e.g. for enabling URL previews for a specific private website only visible in your network.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "192.168.1.1"
        ]
      ]
    },
    "url_preview_url_blacklist": {
      "type": "array",
      "description": "Optional list of URL matches that the URL preview spider is denied from accessing. This is a usability feature, not a security one. You should use `url_preview_ip_range_blacklist` in preference to this, otherwise someone could define a public DNS entry that points to a private IP address and circumvent the blacklist. Applications that perform redirects or serve different content when detecting that Synapse is accessing them can also bypass the blacklist. This is more useful if you know there is an entire shape of URL that you know that you do not want Synapse to preview.\n\nEach list entry is a dictionary of url component attributes as returned by urlparse.urlsplit as applied to the absolute form of the URL. See [here](https://docs.python.org/2/library/urlparse.html#urlparse.urlsplit) for more information. Some examples are:\n\n* `username`\n* `netloc`\n* `scheme`\n* `path`\n\nThe values of the dictionary are treated as a filename match pattern applied to that component of URLs, unless they start with a ^ in which case they are treated as a regular expression match. If all the specified component matches for a given list item succeed, the URL is blacklisted.",
      "items": {
        "type": "object"
      },
      "default": [],
      "examples": [
        [
          {
            "username": "*"
          },
          {
            "netloc": "google.com"
          },
          {
            "netloc": "*.google.com"
          },
          {
            "scheme": "http"
          },
          {
            "netloc": "www.acme.com",
            "path": "/foo"
          },
          {
            "netloc": "^[0-9]+.[0-9]+.[0-9]+.[0-9]+$"
          }
        ]
      ]
    },
    "max_spider_size": {
      "$ref": "#/$defs/bytes",
      "description": "The largest allowed URL preview spidering size in bytes.",
      "default": "10M",
      "examples": [
        "8M"
      ]
    },
    "url_preview_accept_language": {
      "type": "array",
      "description": "A list of values for the Accept-Language HTTP header used when downloading webpages during URL preview generation. This allows Synapse to specify the preferred languages that URL previews should be in when communicating with remote servers.\n\nEach value is a IETF language tag; a 2-3 letter identifier for a language, optionally followed by subtags separated by `-`, specifying a country or region variant.\n\nMultiple values can be provided, and a weight can be added to each by using quality value syntax (;q=). `*` translates to any language.",
      "items": {
        "type": "string"
      },
      "default": [
        "en"
      ],
      "examples": [
        [
          "en-UK",
          "en-US;q=0.9",
          "fr;q=0.8",
          "*;q=0.7"
        ]
      ]
    },
    "oembed": {
      "type": "object",
      "description": "oEmbed allows for easier embedding content from a website. It can be used for generating URLs previews of services which support it. A default list of oEmbed providers is included with Synapse.",
      "properties": {
        "disable_default_providers": {
          "type": "boolean",
          "description": "Do not use Synapse's default list of oEmbed providers.",
          "default": false
        },
        "additional_providers": {
          "type": "array",
          "description": "Additional files with oEmbed configuration (each should be in the form of providers.json).",
          "items": {
            "type": "string"
          },
          "default": []
        }
      },
      "examples": [
        {
          "disable_default_providers": true,
          "additional_providers": [
            "oembed/my_providers.json"
          ]
        }
      ]
    },
    "recaptcha_public_key": {
      "type": [
        "string",
        "null"
      ],
      "description": "This homeserver's ReCAPTCHA public key. Must be specified if [`enable_registration_captcha`](#enable_registration_captcha) is enabled.",
      "default": null,
      "examples": [
        "YOUR_PUBLIC_KEY"
      ]
    },
    "recaptcha_public_key_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`recaptcha_public_key`](#recaptcha_public_key): allows the public key to be specified in an external file.\n\nThe file should be a plain text file, containing only the public key. Synapse reads the public key from the given file once at startup.\n\n_Added in Synapse 1.135.0._",
      "default": null,
      "examples": [
        "/path/to/key/file"
      ]
    },
    "recaptcha_private_key": {
      "type": [
        "string",
        "null"
      ],
      "description": "This homeserver's ReCAPTCHA private key. Must be specified if [`enable_registration_captcha`](#enable_registration_captcha) is enabled.",
      "default": null,
      "examples": [
        "YOUR_PRIVATE_KEY"
      ]
    },
    "recaptcha_private_key_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`recaptcha_private_key`](#recaptcha_private_key): allows the private key to be specified in an external file.\n\nThe file should be a plain text file, containing only the private key. Synapse reads the private key from the given file once at startup.\n\n_Added in Synapse 1.135.0._",
      "default": null,
      "examples": [
        "/path/to/key/file"
      ]
    },
    "enable_registration_captcha": {
      "type": "boolean",
      "description": "Set to `true` to require users to complete a CAPTCHA test when registering an account. Requires a valid ReCaptcha public/private key.\n\nNote that [`enable_registration`](#enable_registration) must also be set to allow account registration.",
      "default": false,
      "examples": [
        true
      ]
    },
    "recaptcha_siteverify_api": {
      "type": "string",
      "description": "The API endpoint to use for verifying `m.login.recaptcha` responses.",
      "default": "https://www.recaptcha.net/recaptcha/api/siteverify",
      "examples": [
        "https://my.recaptcha.site"
      ]
    },
    "turn_uris": {
      "type": "array",
      "description": "The public URIs of the TURN server to give to clients.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "turn:example.org"
        ]
      ]
    },
    "turn_shared_secret": {
      "type": [
        "string",
        "null"
      ],
      "description": "The shared secret used to compute passwords for the TURN server.",
      "default": null,
      "examples": [
        "YOUR_SHARED_SECRET"
      ]
    },
    "turn_shared_secret_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`turn_shared_secret`](#turn_shared_secret): allows the shared secret to be specified in an external file.\n\nThe file should be a plain text file, containing only the shared secret. Synapse reads the shared secret from the given file once at startup.\n\n_Added in Synapse 1.116.0._",
      "default": null,
      "examples": [
        "/path/to/secrets/file"
      ]
    },
    "turn_username": {
      "type": [
        "string",
        "null"
      ],
      "description": "TURN server username if not using a token.",
      "default": null,
      "examples": [
        "TURNSERVER_USERNAME"
      ]
    },
    "turn_password": {
      "type": [
        "string",
        "null"
      ],
      "description": "TURN server password if not using a token.",
      "default": null,
      "examples": [
        "TURNSERVER_PASSWORD"
      ]
    },
    "turn_user_lifetime": {
      "$ref": "#/$defs/duration",
      "description": "How long generated TURN credentials last.",
      "default": "1h",
      "examples": [
        "2h"
      ]
    },
    "turn_allow_guests": {
      "type": "boolean",
      "description": "Whether guests should be allowed to use the TURN server. If false, VoIP will be unreliable for guests. However, it does introduce a slight security risk as it allows users to connect to arbitrary endpoints without having first signed up for a valid account (e.g. by passing a CAPTCHA).",
      "default": true,
      "examples": [
        false
      ]
    },
    "enable_registration": {
      "type": "boolean",
      "description": "Enable registration for new users.\n\nIt is highly recommended that if you enable registration, you set one or more or the following options, to avoid abuse of your server by \"bots\":\n\n* [`enable_registration_captcha`](#enable_registration_captcha)\n* [`registrations_require_3pid`](#registrations_require_3pid)\n* [`registration_requires_token`](#registration_requires_token)\n\n(In order to enable registration without any verification, you must also set [`enable_registration_without_verification`](#enable_registration_without_verification).)\n\nNote that even if this setting is disabled, new accounts can still be created via the admin API if [`registration_shared_secret`](#registration_shared_secret) is set.",
      "default": false,
      "examples": [
        true
      ]
    },
    "enable_registration_without_verification": {
      "type": "boolean",
      "description": "Enable registration without email or captcha verification. Note: this option is *not* recommended, as registration without verification is a known vector for spam and abuse. Has no effect unless [`enable_registration`](#enable_registration) is also enabled.",
      "default": false,
      "examples": [
        true
      ]
    },
    "registrations_require_3pid": {
      "type": "array",
      "description": "If this is set, users must provide all of the specified types of [3PID](https://spec.matrix.org/latest/appendices/#3pid-types) when registering an account.\n\nNote that [`enable_registration`](#enable_registration) must also be set to allow account registration.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "email",
          "msisdn"
        ]
      ]
    },
    "disable_msisdn_registration": {
      "type": "boolean",
      "description": "Explicitly disable asking for MSISDNs from the registration flow (overrides `registrations_require_3pid` if MSISDNs are set as required).",
      "default": false,
      "examples": [
        true
      ]
    },
    "allowed_local_3pids": {
      "type": [
        "array",
        "null"
      ],
      "description": "Mandate that users are only allowed to associate certain formats of 3PIDs with accounts on this server, as specified by the `medium` and `pattern` sub-options. `pattern` is a [Perl-like regular expression](https://docs.python.org/3/library/re.html#module-re).\n\nMore information about 3PIDs, allowed `medium` types and their `address` syntax can be found [in the Matrix spec](https://spec.matrix.org/latest/appendices/#3pid-types).",
      "items": {
        "type": "object",
        "description": "Item allowing a given pattern for the specified 3PID medium.",
        "properties": {
          "medium": {
            "$ref": "#/$defs/3pidmedium",
            "description": "The medium for which to allow 3PID association."
          },
          "pattern": {
            "type": "string",
            "description": "A [Perl-like regular expression](https://docs.python.org/3/library/re.html#module-re) allowing association of a 3PID to a local account if it matches the given format."
          }
        }
      },
      "default": null,
      "examples": [
        [
          {
            "medium": "email",
            "pattern": "^[^@]+@matrix\\.org$"
          },
          {
            "medium": "email",
            "pattern": "^[^@]+@vector\\.im$"
          },
          {
            "medium": "msisdn",
            "pattern": "^44\\d{10}$"
          }
        ]
      ]
    },
    "enable_3pid_lookup": {
      "type": "boolean",
      "description": "Enable 3PIDs lookup requests to identity servers from this server.",
      "default": true,
      "examples": [
        false
      ]
    },
    "registration_requires_token": {
      "type": "boolean",
      "description": "Require users to submit a token during registration. Tokens can be managed using the admin [API](../administration/admin_api/registration_tokens.md). Disabling this option will not delete any tokens previously generated.\n\nNote that [`enable_registration`](#enable_registration) must also be set to allow account registration.",
      "default": false,
      "examples": [
        true
      ]
    },
    "registration_shared_secret": {
      "type": [
        "string",
        "null"
      ],
      "description": "If set, allows registration of standard or admin accounts by anyone who has the shared secret, even if [`enable_registration`](#enable_registration) is not set.\n\nThis is primarily intended for use with the `register_new_matrix_user` script (see [Registering a user](../../setup/installation.md#registering-a-user)); however, the interface is [documented](../../admin_api/register_api.html).\n\nReplacing an existing `registration_shared_secret` with a new one requires users of the [Shared-Secret Registration API](../../admin_api/register_api.html) to start using the new secret for requesting any further one-time nonces.\n\n> ⚠️ **Warning** – The additional consequences of replacing [`macaroon_secret_key`](#macaroon_secret_key) will apply in case it delegates to `registration_shared_secret`.\n\nSee also [`registration_shared_secret_path`](#registration_shared_secret_path).",
      "default": null,
      "examples": [
        "<PRIVATE STRING>"
      ]
    },
    "registration_shared_secret_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`registration_shared_secret`](#registration_shared_secret): allows the shared secret to be specified in an external file.\n\nThe file should be a plain text file, containing only the shared secret.\n\nIf this file does not exist, Synapse will create a new shared secret on startup and store it in this file.\n\n_Added in Synapse 1.67.0._",
      "default": null,
      "examples": [
        "/path/to/secrets/file"
      ]
    },
    "bcrypt_rounds": {
      "type": "integer",
      "description": "Set the number of bcrypt rounds used to generate password hash. Larger numbers increase the work factor needed to generate the hash. The default number is 12 (which equates to 2^12 rounds). N.B. that increasing this will exponentially increase the time required to register or login - e.g. 24 => 2^24 rounds which will take >20 mins.",
      "default": 12,
      "examples": [
        14
      ]
    },
    "allow_guest_access": {
      "type": "boolean",
      "description": "Allows users to register as guests without a password/email/etc, and participate in rooms hosted on this server which have been made accessible to anonymous users.",
      "default": false,
      "examples": [
        true
      ]
    },
    "default_identity_server": {
      "type": [
        "string",
        "null"
      ],
      "description": "The identity server which we suggest that clients should use when users log in on this server.\n\n(By default, no suggestion is made, so it is left up to the client. This setting is ignored unless `public_baseurl` is also explicitly set.)",
      "default": null,
      "examples": [
        "https://matrix.org"
      ]
    },
    "account_threepid_delegates": {
      "type": "object",
      "properties": {
        "msisdn": {
          "type": [
            "string",
            "null"
          ],
          "description": "Identity server base URI for MSISDN (phone numbers). See above."
        }
      },
      "description": "Delegate verification of phone numbers to an identity server.\n\nWhen a user wishes to add a phone number to their account, we need to verify that they actually own that phone number, which requires sending them a text message (SMS). Currently Synapse does not support sending those texts itself and instead delegates the task to an identity server. The base URI for the identity server to be used is specified by the `account_threepid_delegates.msisdn` option.\n\nIf this is left unspecified, Synapse will not allow users to add phone numbers to their account.\n\n(Servers handling the these requests must answer the `/requestToken` endpoints defined by the Matrix Identity Service API [specification](https://matrix.org/docs/spec/identity_service/latest).)\n\n*Deprecated in Synapse 1.64.0*: The `email` option is deprecated.\n\n*Removed in Synapse 1.66.0*: The `email` option has been removed. If present, Synapse will report a configuration error on startup.",
      "default": {},
      "examples": [
        {
          "msisdn": "http://localhost:8090"
        }
      ]
    },
    "enable_set_displayname": {
      "type": "boolean",
      "description": "Whether users are allowed to change their displayname after it has been initially set. Useful when provisioning users based on the contents of a third-party directory.\n\nDoes not apply to server administrators.",
      "default": true,
      "examples": [
        false
      ]
    },
    "enable_set_avatar_url": {
      "type": "boolean",
      "description": "Whether users are allowed to change their avatar after it has been initially set. Useful when provisioning users based on the contents of a third-party directory.\n\nDoes not apply to server administrators.",
      "default": true,
      "examples": [
        false
      ]
    },
    "enable_3pid_changes": {
      "type": "boolean",
      "description": "Whether users can change the third-party IDs associated with their accounts (email address and msisdn).",
      "default": true,
      "examples": [
        false
      ]
    },
    "auto_join_rooms": {
      "type": "array",
      "description": "Users who register on this homeserver will automatically be joined to the rooms listed under this option.\n\nBy default, any room aliases included in this list will be created as a publicly joinable room when the first user registers for the homeserver. If the room already exists, make certain it is a publicly joinable room, i.e. the join rule of the room must be set to `public`. You can find more options relating to auto-joining rooms below.\n\nAs Spaces are just rooms under the hood, Space aliases may also be used.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "#exampleroom:example.com",
          "#anotherexampleroom:example.com"
        ]
      ]
    },
    "autocreate_auto_join_rooms": {
      "type": "boolean",
      "description": "Where `auto_join_rooms` are specified, setting this flag ensures that the rooms exist by creating them when the first user on the homeserver registers. This option will not create Spaces.\n\nBy default the auto-created rooms are publicly joinable from any federated server. Use the `autocreate_auto_join_rooms_federated` and `autocreate_auto_join_room_preset` settings to customise this behaviour.\n\nSetting to false means that if the rooms are not manually created, users cannot be auto-joined since they do not exist.",
      "default": true,
      "examples": [
        false
      ]
    },
    "autocreate_auto_join_rooms_federated": {
      "type": "boolean",
      "description": "Whether the rooms listed in `auto_join_rooms` that are auto-created are available via federation. Only has an effect if `autocreate_auto_join_rooms` is true.\n\nNote that whether a room is federated cannot be modified after creation.\n\nIf true, the room will be joinable from other servers. If false, users from other homeservers are prevented from joining these rooms.",
      "default": true,
      "examples": [
        false
      ]
    },
    "autocreate_auto_join_room_preset": {
      "type": "string",
      "description": "The room preset to use when auto-creating one of `auto_join_rooms`. Only has an effect if `autocreate_auto_join_rooms` is true.\n\nPossible values for this option are:\n* \"public_chat\": the room is joinable by anyone, including federated servers if `autocreate_auto_join_rooms_federated` is true (the default).\n* \"private_chat\": an invitation is required to join these rooms.\n* \"trusted_private_chat\": an invitation is required to join this room and the invitee is assigned a power level of 100 upon joining the room.\n\nEach preset will set up a room in the same manner as if it were provided as the `preset` parameter when calling the [`POST /_matrix/client/v3/createRoom`](https://spec.matrix.org/latest/client-server-api/#post_matrixclientv3createroom) Client-Server API endpoint.\n\nIf a value of \"private_chat\" or \"trusted_private_chat\" is used then `auto_join_mxid_localpart` must also be configured.",
      "enum": [
        "public_chat",
        "private_chat",
        "trusted_private_chat"
      ],
      "default": "public_chat",
      "examples": [
        "private_chat"
      ]
    },
    "auto_join_mxid_localpart": {
      "type": [
        "string",
        "null"
      ],
      "description": "The local part of the user id which is used to create `auto_join_rooms` if `autocreate_auto_join_rooms` is true. If this is not provided then the initial user account that registers will be used to create the rooms.\n\nThe user id is also used to invite new users to any auto-join rooms which are set to invite-only.\n\nIt *must* be configured if `autocreate_auto_join_room_preset` is set to \"private_chat\" or \"trusted_private_chat\".\n\nNote that this must be specified in order for new users to be correctly invited to any auto-join rooms which have been set to invite-only (either at the time of creation or subsequently).\n\nNote that, if the room already exists, this user must be joined and have the appropriate permissions to invite new members.",
      "default": null,
      "examples": [
        "system"
      ]
    },
    "auto_join_rooms_for_guests": {
      "type": "boolean",
      "description": "When `auto_join_rooms` is specified, setting this flag to false prevents guest accounts from being automatically joined to the rooms.",
      "default": true,
      "examples": [
        false
      ]
    },
    "inhibit_user_in_use_error": {
      "type": "boolean",
      "description": "Whether to inhibit errors raised when registering a new account if the user ID already exists. If turned on, requests to `/register/available` will always show a user ID as available, and Synapse won't raise an error when starting a registration with a user ID that already exists. However, Synapse will still raise an error if the registration completes and the username conflicts.",
      "default": false,
      "examples": [
        true
      ]
    },
    "allow_underscore_prefixed_registration": {
      "type": "boolean",
      "description": "Whether users are allowed to register with a underscore-prefixed localpart. By default, AppServices use prefixes like `_example` to namespace their associated ghost users. If turned on, this may result in clashes or confusion. Useful when provisioning users from an external identity provider.",
      "default": false,
      "examples": [
        true
      ]
    },
    "session_lifetime": {
      "$ref": "#/$defs/duration",
      "description": "Time that a user's session remains valid for, after they log in.\n\nNote that this is not currently compatible with guest logins.\n\nNote also that this is calculated at login time: changes are not applied retrospectively to users who have already logged in.",
      "default": "infinity",
      "examples": [
        "24h"
      ]
    },
    "refreshable_access_token_lifetime": {
      "$ref": "#/$defs/duration",
      "description": "Time that an access token remains valid for, if the session is using refresh tokens.\n\nFor more information about refresh tokens, please see the [manual](user_authentication/refresh_tokens.md).\n\nNote that this only applies to clients which advertise support for refresh tokens.\n\nNote also that this is calculated at login time and refresh time: changes are not applied to existing sessions until they are refreshed.",
      "default": "5m",
      "examples": [
        "10m"
      ]
    },
    "refresh_token_lifetime": {
      "$ref": "#/$defs/duration",
      "description": "Time that a refresh token remains valid for (provided that it is not exchanged for another one first). This option can be used to automatically log-out inactive sessions. Please see the manual for more information.\n\nNote also that this is calculated at login time and refresh time: changes are not applied to existing sessions until they are refreshed.",
      "default": "infinity",
      "examples": [
        "24h"
      ]
    },
    "nonrefreshable_access_token_lifetime": {
      "$ref": "#/$defs/duration",
      "description": "Time that an access token remains valid for, if the session is NOT using refresh tokens.\n\nPlease note that not all clients support refresh tokens, so setting this to a short value may be inconvenient for some users who will then be logged out frequently.\n\nNote also that this is calculated at login time: changes are not applied retrospectively to existing sessions for users that have already logged in.",
      "default": "infinity",
      "examples": [
        "24h"
      ]
    },
    "ui_auth": {
      "oneOf": [
        {
          "$ref": "#/$defs/duration"
        },
        {
          "type": "object",
          "properties": {
            "session_timeout": {
              "$ref": "#/$defs/duration"
            }
          }
        }
      ],
      "description": "The amount of time to allow a user-interactive authentication session to be active.\n\nThis defaults to 0, meaning the user is queried for their credentials before every action, but this can be overridden to allow a single validation to be re-used. This weakens the protections afforded by the user-interactive authentication process, by allowing for multiple (and potentially different) operations to use the same validation session.\n\nThis is ignored for potentially \"dangerous\" operations (including deactivating an account, modifying an account password, adding a 3PID, and minting additional login tokens).\n\nUse the `session_timeout` sub-option here to change the time allowed for credential validation.",
      "default": 0,
      "examples": [
        {
          "session_timeout": "15s"
        }
      ]
    },
    "login_via_existing_session": {
      "type": "object",
      "description": "Matrix supports the ability of an existing session to mint a login token for another client.\n\nSynapse disables this by default as it has security ramifications – a malicious client could use the mechanism to spawn more than one session.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enable login via existing session.",
          "default": false
        },
        "require_ui_auth": {
          "type": "boolean",
          "description": "Require user-interactive authentication.",
          "default": true
        },
        "token_timeout": {
          "$ref": "#/$defs/duration",
          "description": "Duration of time the generated token is valid.",
          "default": "5m"
        }
      },
      "examples": [
        {
          "enabled": true,
          "require_ui_auth": false,
          "token_timeout": "5m"
        }
      ]
    },
    "enable_metrics": {
      "type": "boolean",
      "description": "Set to true to enable collection and rendering of performance metrics.",
      "default": false,
      "examples": [
        true
      ]
    },
    "sentry": {
      "type": "object",
      "description": "Use this option to enable sentry integration. Provide the DSN assigned to you by sentry with the `dsn` setting.\n\nAn optional `environment` field can be used to specify an environment. This allows for log maintenance based on different environments, ensuring better organization and analysis.\n\nNOTE: While attempts are made to ensure that the logs don't contain any sensitive information, this cannot be guaranteed. By enabling this option the sentry server may therefore receive sensitive information, and it in turn may then disseminate sensitive information through insecure notification channels if so configured.",
      "properties": {
        "dsn": {
          "type": [
            "string",
            "null"
          ],
          "description": "The DSN assigned by sentry. If unset or null, sentry integration is disabled.",
          "default": null
        },
        "environment": {
          "type": [
            "string",
            "null"
          ],
          "description": "Sentry environment.",
          "default": null
        }
      },
      "examples": [
        {
          "environment": "production",
          "dsn": "..."
        }
      ]
    },
    "metrics_flags": {
      "type": "object",
      "description": "Flags to enable Prometheus metrics which are not suitable to be enabled by default, either for performance reasons or limited use. Currently the only option is `known_servers`.",
      "properties": {
        "known_servers": {
          "type": "boolean",
          "description": "Publishes `synapse_federation_known_servers`, a gauge of the number of servers this homeserver knows about, including itself. May cause performance problems on large homeservers.",
          "default": false
        }
      },
      "examples": [
        {
          "known_servers": true
        }
      ]
    },
    "report_stats": {
      "type": "boolean",
      "description": "Whether or not to report homeserver usage statistics. This is originally set when generating the config. Set this option to true or false to change the current behavior. See [Reporting Homeserver Usage Statistics](../administration/monitoring/reporting_homeserver_usage_statistics.md) for information on what data is reported.\n\nStatistics will be reported 5 minutes after Synapse starts, and then every 3 hours after that.",
      "default": false,
      "examples": [
        true
      ]
    },
    "report_stats_endpoint": {
      "type": "string",
      "description": "The endpoint to report homeserver usage statistics to.",
      "default": "https://matrix.org/report-usage-stats/push",
      "examples": [
        "https://example.com/report-usage-stats/push"
      ]
    },
    "room_prejoin_state": {
      "type": "object",
      "description": "This setting controls the state that is shared with users upon receiving an invite to a room, or in reply to a knock on a room. By default, the following state events are shared with users:\n\n- `m.room.join_rules`\n- `m.room.canonical_alias`\n- `m.room.avatar`\n- `m.room.encryption`\n- `m.room.name`\n- `m.room.create`\n- `m.room.topic`\n\n*Changed in Synapse 1.74:* admins can filter the events in prejoin state based on their state key.",
      "properties": {
        "disable_default_event_types": {
          "type": "boolean",
          "description": "Set to `true` to disable the above defaults. If this is enabled, only the event types listed in `additional_event_types` are shared.",
          "default": false
        },
        "additional_event_types": {
          "type": "array",
          "description": "A list of additional state events to include in the events to be shared. By default, this list is empty (so only the default event types are shared).\n\nEach entry in this list should be either a single string or a list of two strings.\n* A standalone string `t` represents all events with type `t` (i.e. with no restrictions on state keys).\n* A pair of strings `[t, s]` represents a single event with type `t` and state key `s`. The same type can appear in two entries with different state keys: in this situation, both state keys are included in prejoin state.",
          "items": {
            "type": [
              "string",
              "array"
            ],
            "items": {
              "type": "string"
            }
          },
          "default": []
        }
      },
      "examples": [
        {
          "disable_default_event_types": false,
          "additional_event_types": [
            "org.example.custom.event.typeA",
            [
              "org.example.custom.event.typeB",
              "foo"
            ],
            [
              "org.example.custom.event.typeC",
              "bar"
            ],
            [
              "org.example.custom.event.typeC",
              "baz"
            ]
          ]
        }
      ]
    },
    "track_puppeted_user_ips": {
      "type": "boolean",
      "description": "We record the IP address of clients used to access the API for various reasons, including displaying it to the user in the \"Where you're signed in\" dialog.\n\nBy default, when puppeting another user via the admin API, the client IP address is recorded against the user who created the access token (ie, the admin user), and *not* the puppeted user.\n\nSet this option to true to also record the IP address against the puppeted user. (This also means that the puppeted user will count as an \"active\" user for the purpose of monthly active user tracking – see `limit_usage_by_mau` etc above.)",
      "default": false,
      "examples": [
        true
      ]
    },
    "app_service_config_files": {
      "type": "array",
      "description": "A list of application service config files to use.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "app_service_1.yaml",
          "app_service_2.yaml"
        ]
      ]
    },
    "track_appservice_user_ips": {
      "type": "boolean",
      "description": "Set to true to enable tracking of application service IP addresses. Implicitly enables MAU tracking for application service users.",
      "default": false,
      "examples": [
        true
      ]
    },
    "use_appservice_legacy_authorization": {
      "type": "boolean",
      "description": "Whether to send the application service access tokens via the `access_token` query parameter per older versions of the Matrix specification. Defaults to false. Set to true to enable sending access tokens via a query parameter.\n\n**Enabling this option is considered insecure and is not recommended.**",
      "default": false,
      "examples": [
        true
      ]
    },
    "macaroon_secret_key": {
      "type": [
        "string",
        "null"
      ],
      "description": "A secret which is used to sign\n- access token for guest users,\n- short-term login token used during SSO logins (OIDC or SAML2) and\n- token used for unsubscribing from email notifications.\n\nIf none is specified, the `registration_shared_secret` is used, if one is given; otherwise, a secret key is derived from the signing key.\n\n> ⚠️ **Warning** – Replacing an existing `macaroon_secret_key` with a new one will lead to invalidation of access tokens for all guest users. It will also break unsubscribe links in emails sent before the change. An unlucky user might encounter a broken SSO login flow and would have to start again.",
      "default": null,
      "examples": [
        "<PRIVATE STRING>"
      ]
    },
    "macaroon_secret_key_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`macaroon_secret_key`](#macaroon_secret_key): allows the secret key to be specified in an external file.\n\nThe file should be a plain text file, containing only the secret key. Synapse reads the secret key from the given file once at startup.\n\n_Added in Synapse 1.121.0._",
      "default": null,
      "examples": [
        "/path/to/secrets/file"
      ]
    },
    "form_secret": {
      "type": [
        "string",
        "null"
      ],
      "description": "A secret which is used to calculate HMACs for form values, to stop falsification of values. Must be specified for the User Consent forms to work.\n\nReplacing an existing `form_secret` with a new one might break the user consent page for an unlucky user and require them to reopen the page from a new link.",
      "default": null,
      "examples": [
        "<PRIVATE STRING>"
      ]
    },
    "form_secret_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`form_secret`](#form_secret): allows the secret to be specified in an external file.\n\nThe file should be a plain text file, containing only the secret. Synapse reads the secret from the given file once at startup.\n\n_Added in Synapse 1.126.0._",
      "default": null,
      "examples": [
        "/path/to/secrets/file"
      ]
    },
    "signing_key_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "Path to the signing key to sign events and federation requests with.\n\n*New in Synapse 1.67*: If this file does not exist, Synapse will create a new signing key on startup and store it in this file.",
      "default": null,
      "examples": [
        "CONFDIR/SERVERNAME.signing.key"
      ]
    },
    "old_signing_keys": {
      "type": "object",
      "description": "The keys that the server used to sign messages with but won't use to sign new messages.\n\nIt is possible to build an entry from an old `signing.key` file using the `export_signing_key` script which is provided with synapse.\n\nIf you have lost the private key file, you can ask another server you trust to tell you the public keys it has seen from your server. To fetch the keys from `matrix.org`, try something like:\n\n```\ncurl https://matrix-federation.matrix.org/_matrix/key/v2/query/myserver.example.com |\n  jq '.server_keys | map(.verify_keys) | add'\n```",
      "additionalProperties": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The base64-encoded public key."
          },
          "expired_ts": {
            "type": "integer",
            "description": "Time, in milliseconds since the unix epoch, that the key was last used."
          }
        }
      },
      "default": {},
      "examples": [
        {
          "ed25519:id": {
            "key": "base64string",
            "expired_ts": 123456789123
          }
        }
      ]
    },
    "key_refresh_interval": {
      "$ref": "#/$defs/duration",
      "description": "How long key response published by this server is valid for. Used to set the `valid_until_ts` in `/key/v2` APIs. Determines how quickly servers will query to check which keys are still valid.",
      "default": "1d",
      "examples": [
        "2d"
      ]
    },
    "trusted_key_servers": {
      "type": "array",
      "description": "The trusted servers to download signing keys from.\n\nWhen we need to fetch a signing key, each server is tried in parallel.\n\nNormally, the connection to the key server is validated via TLS certificates. Additional security can be provided by configuring a `verify key`, which will make synapse check that the response is signed by that key.\n\nThis setting supersedes an older setting named `perspectives`. The old format is still supported for backwards-compatibility, but it is deprecated.\n\n`trusted_key_servers` defaults to matrix.org, but using it will generate a warning on start-up. To suppress this warning, set `suppress_key_server_warning` to true.\n\nIf the use of a trusted key server has to be deactivated, e.g. in a private federation or for privacy reasons, this can be realised by setting an empty array (`trusted_key_servers: []`). Then Synapse will request the keys directly from the server that owns the keys. If Synapse does not get keys directly from the server, the events of this server will be rejected.",
      "items": {
        "server_name": {
          "type": "string",
          "description": "The name of the server. Required."
        },
        "verify_keys": {
          "type": [
            "object",
            "null"
          ],
          "description": "An optional map from key id to base64-encoded public key. If specified, we will check that the response is signed by at least one of the given keys.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "accept_keys_insecurely": {
          "type": "boolean",
          "description": "Normally, if `verify_keys` is unset, and `federation_verify_certificates` is not `true`, synapse will refuse to start, because this would allow anyone who can spoof DNS responses to masquerade as the trusted key server. If you know what you are doing and are sure that your network environment provides a secure connection to the key server, you can set this to `true` to override this behaviour."
        }
      },
      "default": [
        {
          "server_name": "matrix.org"
        }
      ],
      "examples": [
        [
          {
            "server_name": "my_trusted_server.example.com",
            "verify_keys": {
              "ed25519:auto": "abcdefghijklmnopqrstuvwxyzabcdefghijklmopqr"
            }
          },
          {
            "server_name": "my_other_trusted_server.example.com"
          }
        ],
        [
          {
            "server_name": "matrix.org"
          }
        ]
      ]
    },
    "suppress_key_server_warning": {
      "type": "boolean",
      "description": "Set the following to true to disable the warning that is emitted when the `trusted_key_servers` include \"matrix.org\". See above.",
      "default": false,
      "examples": [
        true
      ]
    },
    "key_server_signing_keys_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "The signing keys to use when acting as a trusted key server. If not specified defaults to the server signing key.\n\nCan contain multiple keys, one per line.",
      "default": null,
      "examples": [
        "key_server_signing_keys.key"
      ]
    },
    "saml2_config": {
      "type": "object",
      "description": "Enable SAML2 for registration and login. Uses pysaml2. To learn more about pysaml and to find a full list options for configuring pysaml, read the docs [here](https://pysaml2.readthedocs.io/en/latest/).\n\nAt least one of `sp_config` or `config_path` must be set in this section to enable SAML login. You can either put your entire pysaml config inline using the `sp_config` option, or you can specify a path to a psyaml config file with the sub-option `config_path`.\n\nOnce SAML support is enabled, a metadata file will be exposed at `https://<server>:<port>/_synapse/client/saml2/metadata.xml`, which you may be able to use to configure your SAML IdP with. Alternatively, you can manually configure the IdP to use an ACS location of `https://<server>:<port>/_synapse/client/saml2/authn_response`.",
      "properties": {
        "idp_name": {
          "type": "string",
          "description": "A user-facing name for this identity provider, which is used to offer the user a choice of login mechanisms."
        },
        "idp_icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "An optional icon for this identity provider, which is presented by clients and Synapse's own IdP picker page. If given, must be an MXC URI of the format `mxc://<server-name>/<media-id>`. (An easy way to obtain such an MXC URI is to upload an image to an (unencrypted) room and then copy the URL from the source of the event.)"
        },
        "idp_brand": {
          "description": "An optional brand for this identity provider, allowing clients to style the login flow according to the identity provider in question. See the [spec](https://spec.matrix.org/latest/) for possible options here."
        },
        "sp_config": {
          "type": [
            "object",
            "null"
          ],
          "description": "Configuration for the pysaml2 Service Provider. See pysaml2 docs for format of config. Default values will be used for the `entityid` and `service` settings, so it is not normally necessary to specify them unless you need to override them. Here are a few useful sub-options for configuring pysaml:\n* `metadata`: Point this to the IdP's metadata. You must provide either a local file via the `local` attribute or (preferably) a URL via the `remote` attribute.\n* `accepted_time_diff: 3`: Allowed clock difference in seconds between the homeserver and IdP. Defaults to 0.\n* `service`: By default, the user has to go to our login page first. If you'd like to allow IdP-initiated login, set `allow_unsolicited` to true under `sp` in the `service` section.",
          "default": null
        },
        "config_path": {
          "type": [
            "string",
            "null"
          ],
          "description": "Specify a separate pysaml2 configuration file.",
          "default": null
        },
        "saml_session_lifetime": {
          "$ref": "#/$defs/duration",
          "description": "The lifetime of a SAML session. This defines how long a user has to complete the authentication process, if `allow_unsolicited` is unset.",
          "default": "15m"
        },
        "user_mapping_provider": {
          "type": "object",
          "description": "Using this option, an external module can be provided as a custom solution to mapping attributes returned from a saml provider onto a matrix user.",
          "properties": {
            "module": {
              "type": "string",
              "description": "The custom module's class."
            },
            "config": {
              "type": "object",
              "description": "Custom configuration values for the module. Use the values provided in the example if you are using the built-in user_mapping_provider, or provide your own config values for a custom class if you are using one. This section will be passed as a Python dictionary to the module's `parse_config` method. The built-in provider takes the following two options:\n* `mxid_source_attribute`: The SAML attribute (after mapping via the attribute maps) to use to derive the Matrix ID from. It is \"uid\" by default. Note: This used to be configured by the `saml2_config.mxid_source_attribute option`. If that is still defined, its value will be used instead.\n* `mxid_mapping`: The mapping system to use for mapping the saml attribute onto a matrix ID. Options include: `hexencode` (which maps unpermitted characters to `=xx`) and `dotreplace` (which replaces unpermitted characters with `.`). The default is `hexencode`. Note: This used to be configured by the `saml2_config.mxid_mapping option`. If that is still defined, its value will be used instead."
            }
          }
        },
        "grandfathered_mxid_source_attribute": {
          "type": "string",
          "description": "In previous versions of synapse, the mapping from SAML attribute to MXID was always calculated dynamically rather than stored in a table. For backwards-compatibility, we will look for `user_ids` matching such a pattern before creating a new account. This setting controls the SAML attribute which will be used for this backwards-compatibility lookup. Typically it should be \"uid\", but if the attribute maps are changed, it may be necessary to change it.",
          "default": "uid"
        },
        "attribute_requirements": {
          "type": "array",
          "description": "It is possible to configure Synapse to only allow logins if SAML attributes match particular values. The requirements can be listed under `attribute_requirements` as shown in the example. All of the listed attributes must match for the login to be permitted. Values can be specified in a `one_of` list to allow multiple values for an attribute.",
          "items": {
            "type": "object",
            "description": "Item allowing a specific SAML attribute.",
            "properties": {
              "attribute": {
                "type": "string",
                "description": "SAML attribute for which to allow logins."
              },
              "value": {
                "type": "string",
                "description": "Value the SAML attribute must match."
              },
              "one_of": {
                "type": "array",
                "description": "List of values the SAML attribute must all match.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "attribute"
            ]
          }
        },
        "idp_entityid": {
          "type": [
            "string",
            "null"
          ],
          "description": "If the metadata XML contains multiple IdP entities then the `idp_entityid` option must be set to the entity to redirect users to. Most deployments only have a single IdP entity and so should omit this option.",
          "default": null
        }
      },
      "examples": [
        {
          "sp_config": {
            "metadata": {
              "local": [
                "saml2/idp.xml"
              ],
              "remote": [
                {
                  "url": "https://our_idp/metadata.xml"
                }
              ]
            },
            "accepted_time_diff": 3,
            "service": {
              "sp": {
                "allow_unsolicited": true
              }
            },
            "description": [
              "My awesome SP",
              "en"
            ],
            "name": [
              "Test SP",
              "en"
            ],
            "ui_info": {
              "display_name": [
                {
                  "lang": "en",
                  "text": "Display Name is the descriptive name of your service."
                }
              ],
              "description": [
                {
                  "lang": "en",
                  "text": "Description should be a short paragraph explaining the purpose of the service."
                }
              ],
              "information_url": [
                {
                  "lang": "en",
                  "text": "https://example.com/terms-of-service"
                }
              ],
              "privacy_statement_url": [
                {
                  "lang": "en",
                  "text": "https://example.com/privacy-policy"
                }
              ],
              "keywords": [
                {
                  "lang": "en",
                  "text": [
                    "Matrix",
                    "Element"
                  ]
                }
              ],
              "logo": [
                {
                  "lang": "en",
                  "text": "https://example.com/logo.svg",
                  "width": "200",
                  "height": "80"
                }
              ]
            },
            "organization": {
              "name": "Example com",
              "display_name": [
                [
                  "Example co",
                  "en"
                ]
              ],
              "url": "http://example.com"
            },
            "contact_person": [
              {
                "given_name": "Bob",
                "sur_name": "the Sysadmin",
                "email_address": [
                  "admin@example.com"
                ],
                "contact_type": "technical"
              }
            ]
          },
          "saml_session_lifetime": "5m",
          "user_mapping_provider": {
            "config": {
              "mxid_source_attribute": "displayName",
              "mxid_mapping": "dotreplace"
            }
          },
          "grandfathered_mxid_source_attribute": "upn",
          "attribute_requirements": [
            {
              "attribute": "userGroup",
              "value": "staff"
            },
            {
              "attribute": "department",
              "one_of": [
                "sales",
                "admins"
              ]
            }
          ],
          "idp_entityid": "https://our_idp/entityid"
        }
      ]
    },
    "oidc_providers": {
      "type": "array",
      "description": "List of OpenID Connect (OIDC) / OAuth 2.0 identity providers, for registration and login. See [here](../../openid.md) for information on how to configure these options.\n\nFor backwards compatibility, it is also possible to configure a single OIDC provider via an `oidc_config` setting. This is now deprecated and admins are advised to migrate to the `oidc_providers` format. (When doing that migration, use `oidc` for the `idp_id` to ensure that existing users continue to be recognised.)\n\nIt is possible to configure Synapse to only allow logins if certain attributes match particular values in the OIDC userinfo. The requirements can be listed under `attribute_requirements` as shown here:\n```yaml\nattribute_requirements:\n  - attribute: family_name\n    one_of: [\"Stephensson\", \"Smith\"]\n  - attribute: groups\n    value: \"admin\"\n  # If `value` or `one_of` are not specified, the attribute only needs\n  # to exist, regardless of value.\n  - attribute: picture\n```\n\n`attribute` is a required field, while `value` and `one_of` are optional.\n\nAll of the listed attributes must match for the login to be permitted. Additional attributes can be added to userinfo by expanding the `scopes` section of the OIDC config to retrieve additional information from the OIDC provider.\n\nIf the OIDC claim is a list, then the attribute must match any value in the list. Otherwise, it must exactly match the value of the claim. Using the example above, the `family_name` claim MUST be either \"Stephensson\" or \"Smith\", but the `groups` claim MUST contain \"admin\".",
      "items": {
        "type": "object",
        "properties": {
          "idp_id": {
            "type": "string",
            "description": "A unique identifier for this identity provider. Used internally by Synapse; should be a single word such as \"github\". Note that, if this is changed, users authenticating via that provider will no longer be recognised as the same user! (Use \"oidc\" here if you are migrating from an old `oidc_config` configuration.)"
          },
          "idp_name": {
            "type": "string",
            "description": "A user-facing name for this identity provider, which is used to offer the user a choice of login mechanisms."
          },
          "idp_icon": {
            "type": "string",
            "description": "An optional icon for this identity provider, which is presented by clients and Synapse's own IdP picker page. If given, must be an MXC URI of the format `mxc://<server-name>/<media-id>`. (An easy way to obtain such an MXC URI is to upload an image to an (unencrypted) room and then copy the URL from the source of the event.)"
          },
          "idp_brand": {
            "type": "string",
            "description": "An optional brand for this identity provider, allowing clients to style the login flow according to the identity provider in question. See the [spec](https://spec.matrix.org/latest/) for possible options here."
          },
          "discover": {
            "type": "boolean",
            "description": "Set to false to disable the use of the OIDC discovery mechanism to discover endpoints. Defaults to true."
          },
          "issuer": {
            "type": "string",
            "description": "Required. The OIDC issuer. Used to validate tokens and (if discovery is enabled) to discover the provider's endpoints."
          },
          "client_id": {
            "type": "string",
            "description": "Required. OAuth2 client id to use."
          },
          "client_secret": {
            "type": [
              "string",
              "null"
            ],
            "description": "OAuth2 client secret to use. May be omitted if `client_secret_jwt_key` is given, or if `client_auth_method` is `none`. Must be omitted if `client_secret_path` is specified."
          },
          "client_secret_path": {
            "type": [
              "string",
              "null"
            ],
            "description": "Path to the OAuth2 client secret to use. With that it's not necessary to leak secrets into the config file itself. Mutually exclusive with `client_secret`. Can be omitted if `client_secret_jwt_key` is specified.\n\n*Added in Synapse 1.91.0.*"
          },
          "client_secret_jwt_key": {
            "type": [
              "object",
              "null"
            ],
            "description": "Alternative to client_secret: details of a key used to create a JSON Web Token to be used as an OAuth2 client secret.",
            "properties": {
              "key": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A pem-encoded signing key. Must be a suitable key for the algorithm specified. Required unless `key_file` is given."
              },
              "key_file": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Path to the file containing a pem-encoded signing key. Required unless `key` is given."
              },
              "jwt_header": {
                "type": "object",
                "description": "Dictionary giving properties to include in the JWT header. Must include the key `alg`.",
                "properties": {
                  "alg": {
                    "type": "string",
                    "description": "Algorithm used to sign the JWT, such as ES256, using the JWA identifiers in RFC7518."
                  }
                }
              },
              "jwt_payload": {
                "type": "object",
                "description": "Optional dictionary giving properties to include in the JWT payload. Normally this should include an `iss` key."
              }
            }
          },
          "client_auth_method": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "client_secret_basic",
              "client_secret_post",
              "none",
              null
            ],
            "description": "Auth method to use when exchanging the token. Valid values are `client_secret_basic` (default), `client_secret_post` and `none`."
          },
          "pkce_method": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "auto",
              "always",
              "never",
              null
            ],
            "description": "Whether to use proof key for code exchange when requesting and exchanging the token. Valid values are: `auto`, `always`, or `never`. Defaults to `auto`, which uses PKCE if supported during metadata discovery. Set to `always` to force enable PKCE or `never` to force disable PKCE."
          },
          "id_token_signing_alg_values_supported": {
            "type": "array",
            "description": "List of the JWS signing algorithms (`alg` values) that are supported for signing the `id_token`.\n\nThis is *not* required if `discovery` is disabled. We default to supporting `RS256` in the downstream usage if no algorithms are configured here or in the discovery document.\n\nAccording to the spec, the algorithm `\"RS256\"` MUST be included. The absolute rigid approach would be to reject this provider as non-compliant if it's not included but we simply allow whatever and see what happens (you're the one that configured the value and cooperating with the identity provider).\n\nThe `alg` value `\"none\"` MAY be supported but can only be used if the Authorization Endpoint does not include `id_token` in the `response_type` (ex. `/authorize?response_type=code` where `none` can apply, `/authorize?response_type=code%20id_token` where `none` can't apply) (such as when using the Authorization Code Flow).",
            "items": {
              "type": "string"
            }
          },
          "scopes": {
            "type": [
              "array",
              "null"
            ],
            "description": "List of scopes to request. This should normally include the \"openid\" scope. Defaults to `[\"openid\"]`.",
            "items": {
              "type": "string"
            }
          },
          "authorization_endpoint": {
            "type": "string",
            "description": "The OAuth2 authorization endpoint. Required if provider discovery is disabled."
          },
          "token_endpoint": {
            "type": "string",
            "description": "The OAuth2 token endpoint. Required if provider discovery is disabled."
          },
          "userinfo_endpoint": {
            "type": "string",
            "description": "The OIDC userinfo endpoint. Required if discovery is disabled and the \"openid\" scope is not requested."
          },
          "jwks_uri": {
            "type": "string",
            "description": "URI where to fetch the JWKS. Required if discovery is disabled and the \"openid\" scope is used."
          },
          "skip_verification": {
            "type": "boolean",
            "description": "Set to `true` to skip metadata verification. Use this if you are connecting to a provider that is not OpenID Connect compliant. Defaults to false. Avoid this in production."
          },
          "user_profile_method": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "auto",
              "userinfo_endpoint",
              null
            ],
            "description": "Whether to fetch the user profile from the userinfo endpoint, or to rely on the data returned in the id_token from the `token_endpoint`. Valid values are: `auto` or `userinfo_endpoint`. Defaults to `auto`, which uses the userinfo endpoint if `openid` is not included in `scopes`. Set to `userinfo_endpoint` to always use the userinfo endpoint."
          },
          "redirect_uri": {
            "type": [
              "string",
              "null"
            ],
            "description": "An optional string, that if set will override the `redirect_uri` parameter sent in the requests to the authorization and token endpoints. Useful if you want to redirect the client to another endpoint as part of the OIDC login. Be aware that the client must then call Synapse's OIDC callback URL (`<public_baseurl>/_synapse/client/oidc/callback`) manually afterwards. Must be a valid URL including scheme and path."
          },
          "additional_authorization_parameters": {
            "type": "object",
            "description": "String to string dictionary that will be passed as additional parameters to the authorization grant URL.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "passthrough_authorization_parameters": {
            "type": "array",
            "description": "List of parameters that will be passed through from the redirect endpoint to the authorization grant URL.",
            "items": {
              "type": "string"
            }
          },
          "allow_existing_users": {
            "type": "boolean",
            "description": "Set to true to allow a user logging in via OIDC to match a pre-existing account instead of failing. This could be used if switching from password logins to OIDC. Defaults to false."
          },
          "enable_registration": {
            "type": "boolean",
            "description": "Set to `false` to disable automatic registration of new users. This allows the OIDC SSO flow to be limited to sign in only, rather than automatically registering users that have a valid SSO login but do not have a pre-registered account. Defaults to true."
          },
          "user_mapping_provider": {
            "type": "object",
            "description": "Configuration for how attributes returned from a OIDC provider are mapped onto a matrix user.\n\nWhen rendering, the Jinja2 templates are given a `user` variable, which is set to the claims returned by the UserInfo Endpoint and/or in the ID Token.",
            "properties": {
              "module": {
                "type": "string",
                "description": "The class name of a custom mapping module. Default is `synapse.handlers.oidc.JinjaOidcMappingProvider`. See [OpenID Mapping Providers](../../sso_mapping_providers.md#openid-mapping-providers) for information on implementing a custom mapping provider."
              },
              "config": {
                "type": "object",
                "description": "Configuration for the mapping provider module. This section will be passed as a Python dictionary to the user mapping provider module's `parse_config` method.\n\nFor the default provider, the following settings are available:\n\n* `subject_template`: Jinja2 template for a unique identifier for the user. Defaults to `{{ user.sub }}`, which OpenID Connect compliant providers should provide.\n\n  This replaces and overrides `subject_claim`.\n\n* `subject_claim`: name of the claim containing a unique identifier for the user. Defaults to `sub`, which OpenID Connect compliant providers should provide.\n\n  *Deprecated in Synapse v1.75.0.*\n\n* `picture_template`: Jinja2 template for an url for the user's profile picture. Defaults to `{{ user.picture }}`, which OpenID Connect compliant providers should provide and has to refer to a direct image file such as PNG, JPEG, or GIF image file.\n\n  This replaces and overrides `picture_claim`.\n\n  Currently only supported in monolithic (single-process) server configurations where the media repository runs within the Synapse process.\n\n* `picture_claim`: name of the claim containing an url for the user's profile picture. Defaults to \"picture\", which OpenID Connect compliant providers should provide and has to refer to a direct image file such as PNG, JPEG, or GIF image file.\n\n  Currently only supported in monolithic (single-process) server configurations where the media repository runs within the Synapse process.\n\n  *Deprecated in Synapse v1.75.0.*\n\n* `localpart_template`: Jinja2 template for the localpart of the MXID. If this is not set, the user will be prompted to choose their own username (see the documentation for the `sso_auth_account_details.html` template). This template can use the `localpart_from_email` filter.\n\n* `confirm_localpart`: Whether to prompt the user to validate (or change) the generated localpart (see the documentation for the \"sso_auth_account_details.html\" template), instead of registering the account right away.\n\n* `display_name_template`: Jinja2 template for the display name to set on first login. If unset, no displayname will be set.\n\n* `email_template`: Jinja2 template for the email address of the user. If unset, no email address will be added to the account.\n\n* `extra_attributes`: a map of Jinja2 templates for extra attributes to send back to the client during login. Note that these are non-standard and clients will ignore them without modifications."
              }
            }
          },
          "backchannel_logout_enabled": {
            "type": "boolean",
            "description": "Set to `true` to process OIDC Back-Channel Logout notifications. Those notifications are expected to be received on `/_synapse/client/oidc/backchannel_logout`. Defaults to `false`."
          },
          "backchannel_logout_ignore_sub": {
            "type": "boolean",
            "description": "By default, the OIDC Back-Channel Logout feature checks that the `sub` claim matches the subject claim received during login. This check can be disabled by setting this to `true`. Defaults to `false`.\n\nYou might want to disable this if the `subject_claim` returned by the mapping provider is not `sub`."
          }
        }
      },
      "default": [],
      "examples": [
        [
          {
            "idp_id": "my_idp",
            "idp_name": "My OpenID provider",
            "idp_icon": "mxc://example.com/mediaid",
            "discover": false,
            "issuer": "https://accounts.example.com/",
            "client_id": "provided-by-your-issuer",
            "client_secret": "provided-by-your-issuer",
            "client_auth_method": "client_secret_post",
            "scopes": [
              "openid",
              "profile"
            ],
            "authorization_endpoint": "https://accounts.example.com/oauth2/auth",
            "token_endpoint": "https://accounts.example.com/oauth2/token",
            "userinfo_endpoint": "https://accounts.example.com/userinfo",
            "jwks_uri": "https://accounts.example.com/.well-known/jwks.json",
            "additional_authorization_parameters": {
              "acr_values": "2fa"
            },
            "passthrough_authorization_parameters": [
              "login_hint"
            ],
            "skip_verification": true,
            "enable_registration": true,
            "user_mapping_provider": {
              "config": {
                "subject_claim": "id",
                "localpart_template": "{{ user.login }}",
                "display_name_template": "{{ user.name }}",
                "email_template": "{{ user.email }}"
              }
            },
            "attribute_requirements": [
              {
                "attribute": "userGroup",
                "value": "synapseUsers"
              }
            ]
          }
        ]
      ]
    },
    "cas_config": {
      "type": "object",
      "description": "Enable Central Authentication Service (CAS) for registration and login.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Set this to true to enable authorization against a CAS server.",
          "default": false
        },
        "idp_name": {
          "type": "string",
          "description": "A user-facing name for this identity provider, which is used to offer the user a choice of login mechanisms."
        },
        "idp_icon": {
          "type": [
            "string",
            "null"
          ],
          "description": "An optional icon for this identity provider, which is presented by clients and Synapse's own IdP picker page. If given, must be an MXC URI of the format `mxc://<server-name>/<media-id>`. (An easy way to obtain such an MXC URI is to upload an image to an (unencrypted) room and then copy the URL from the source of the event.)",
          "default": null
        },
        "idp_brand": {
          "type": [
            "string",
            "null"
          ],
          "description": "An optional brand for this identity provider, allowing clients to style the login flow according to the identity provider in question. See the [spec](https://spec.matrix.org/latest/) for possible options here.",
          "default": null
        },
        "server_url": {
          "type": "string",
          "description": "The URL of the CAS authorization endpoint."
        },
        "protocol_version": {
          "type": [
            "integer",
            "null"
          ],
          "description": "The CAS protocol version. (Version 3 is required if you want to use `required_attributes`).",
          "default": null
        },
        "displayname_attribute": {
          "type": [
            "string",
            "null"
          ],
          "description": "The attribute of the CAS response to use as the display name. If no name is given here, no displayname will be set.",
          "default": null
        },
        "required_attributes": {
          "type": "object",
          "description": "It is possible to configure Synapse to only allow logins if CAS attributes match particular values. All of the keys given below must exist and the values must match the given value. Alternately if the given value is `None` then any value is allowed (the attribute just must exist). All of the listed attributes must match for the login to be permitted.",
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          },
          "default": {}
        },
        "enable_registration": {
          "type": "boolean",
          "description": "Set to `false` to disable automatic registration of new users. This allows the CAS SSO flow to be limited to sign in only, rather than automatically registering users that have a valid SSO login but do not have a pre-registered account.",
          "default": true
        },
        "allow_numeric_ids": {
          "type": "boolean",
          "description": "Set to `true` allow numeric user IDs. This allows CAS SSO flow to provide user IDs composed of numbers only. These identifiers will be prefixed by the letter \"u\" by default. The prefix can be configured using the `numeric_ids_prefix` option. Be careful to choose the prefix correctly to avoid any possible conflicts (e.g. user 1234 becomes u1234 when a user u1234 already exists).",
          "default": false
        },
        "numeric_ids_prefix": {
          "type": "string",
          "description": "The prefix you wish to add in front of a numeric user ID when the `allow_numeric_ids` option is set to `true`. Only alphanumeric characters are allowed.\n\n*Added in Synapse 1.93.0.*",
          "default": "u"
        }
      },
      "examples": [
        {
          "enabled": true,
          "server_url": "https://cas-server.com",
          "protocol_version": 3,
          "displayname_attribute": "name",
          "required_attributes": {
            "userGroup": "staff",
            "department": "None"
          },
          "enable_registration": true,
          "allow_numeric_ids": true,
          "numeric_ids_prefix": "numericuser"
        }
      ]
    },
    "sso": {
      "type": "object",
      "description": "Additional settings to use with single-sign on systems such as OpenID Connect, SAML2 and CAS.\n\nServer admins can configure custom templates for pages related to SSO. See [here](../../templates.md) for more information.",
      "properties": {
        "client_whitelist": {
          "type": [
            "array",
            "null"
          ],
          "description": "A list of client URLs which are whitelisted so that the user does not have to confirm giving access to their account to the URL. Any client whose URL starts with an entry in the following list will not be subject to an additional confirmation step after the SSO login is completed.\n\nWARNING: An entry such as \"https://my.client\" is insecure, because it will also match \"https://my.client.evil.site\", exposing your users to phishing attacks from evil.site. To avoid this, include a slash after the hostname: \"https://my.client/\".\n\nThe login fallback page (used by clients that don't natively support the required login flows) is whitelisted in addition to any URLs in this list. By default, this list contains only the login fallback page.",
          "items": {
            "type": "string"
          },
          "default": null
        },
        "update_profile_information": {
          "type": "boolean",
          "description": "Use this setting to keep a user's profile fields in sync with information from the identity provider. Currently only syncing the displayname is supported. Fields are checked on every SSO login, and are updated if necessary. Note that enabling this option will override user profile information, regardless of whether users have opted-out of syncing that information when first signing in.",
          "default": false
        }
      },
      "examples": [
        {
          "client_whitelist": [
            "https://riot.im/develop",
            "https://my.custom.client/"
          ],
          "update_profile_information": true
        }
      ]
    },
    "jwt_config": {
      "type": "object",
      "description": "JSON web token integration. The following settings can be used to make Synapse JSON web tokens for authentication, instead of its internal password database.\n\nEach JSON Web Token needs to contain a \"sub\" (subject) claim, which is used as the localpart of the mxid.\n\nAdditionally, the expiration time (\"exp\"), not before time (\"nbf\"), and issued at (\"iat\") claims are validated if present.\n\nNote that this is a non-standard login type and client support is expected to be non-existent.\n\nSee [here](../../jwt.md) for more.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Set to true to enable authorization using JSON web tokens.",
          "default": false
        },
        "secret": {
          "type": "string",
          "description": "This is either the private shared secret or the public key used to decode the contents of the JSON web token. Required if `enabled` is set to true."
        },
        "algorithm": {
          "type": "string",
          "description": "The algorithm used to sign (or HMAC) the JSON web token. Supported algorithms are listed [here (section JWS)](https://docs.authlib.org/en/latest/specs/rfc7518.html). Required if `enabled` is set to true."
        },
        "subject_claim": {
          "type": [
            "string",
            "null"
          ],
          "description": "Name of the claim containing a unique identifier for the user.",
          "default": "sub"
        },
        "display_name_claim": {
          "type": [
            "string",
            "null"
          ],
          "description": "Name of the claim containing the display name for the user. If provided, the display name will be set to the value of this claim upon first login.",
          "default": null
        },
        "issuer": {
          "type": [
            "string",
            "null"
          ],
          "description": "The issuer to validate the \"iss\" claim against. If provided the \"iss\" claim will be required and validated for all JSON web tokens.",
          "default": null
        },
        "audiences": {
          "type": [
            "array",
            "null"
          ],
          "description": "A list of audiences to validate the \"aud\" claim against. If provided the \"aud\" claim will be required and validated for all JSON web tokens. Note that if the \"aud\" claim is included in a JSON web token then validation will fail without configuring audiences.",
          "items": {
            "type": "string"
          },
          "default": null
        }
      },
      "examples": [
        {
          "enabled": true,
          "secret": "provided-by-your-issuer",
          "algorithm": "provided-by-your-issuer",
          "subject_claim": "name_of_claim",
          "display_name_claim": "name_of_claim",
          "issuer": "provided-by-your-issuer",
          "audiences": [
            "provided-by-your-issuer"
          ]
        }
      ]
    },
    "password_config": {
      "type": "object",
      "description": "Use this setting to enable password-based logins.",
      "properties": {
        "enabled": {
          "type": [
            "boolean",
            "string"
          ],
          "enum": [
            true,
            false,
            "only_for_reauth"
          ],
          "description": "Set to false to disable password authentication. Set to `only_for_reauth` to allow users with existing passwords to use them to reauthenticate (not log in), whilst preventing new users from setting passwords.",
          "default": true
        },
        "localdb_enabled": {
          "type": "boolean",
          "description": "Set to false to disable authentication against the local password database. This is ignored if `enabled` is false, and is only useful if you have other `password_providers`.",
          "default": true
        },
        "pepper": {
          "type": [
            "string",
            "null"
          ],
          "description": "Set the value here to a secret random string for extra security. DO NOT CHANGE THIS AFTER INITIAL SETUP!",
          "default": null
        },
        "policy": {
          "type": "object",
          "description": "Define and enforce a password policy, such as minimum lengths for passwords, etc. This is an implementation of MSC2000.",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Set to true to enable.",
              "default": false
            },
            "minimum_length": {
              "type": "integer",
              "description": "Minimum accepted length for a password.",
              "default": 0
            },
            "require_digit": {
              "type": "boolean",
              "description": "Whether a password must contain at least one digit.",
              "default": false
            },
            "require_symbol": {
              "type": "boolean",
              "description": "Whether a password must contain at least one symbol. A symbol is any character that's not a number or a letter.",
              "default": false
            },
            "require_lowercase": {
              "type": "boolean",
              "description": "Whether a password must contain at least one lowercase letter.",
              "default": false
            },
            "require_uppercase": {
              "type": "boolean",
              "description": "Whether a password must contain at least one uppercase letter.",
              "default": false
            }
          }
        }
      },
      "examples": [
        {
          "enabled": false,
          "localdb_enabled": false,
          "pepper": "EVEN_MORE_SECRET",
          "policy": {
            "enabled": true,
            "minimum_length": 15,
            "require_digit": true,
            "require_symbol": true,
            "require_lowercase": true,
            "require_uppercase": true
          }
        }
      ]
    },
    "push": {
      "type": "object",
      "description": "This setting defines options for push notifications.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enables or disables push notification calculation. Note, disabling this will also stop unread counts being calculated for rooms. This mode of operation is intended for homeservers which may only have bots or appservice users connected, or are otherwise not interested in push/unread counters.",
          "default": true
        },
        "include_content": {
          "type": "boolean",
          "description": "Clients requesting push notifications can either have the body of the message sent in the notification poke along with other details like the sender, or just the event ID and room ID (`event_id_only`). If clients choose to have the body sent, this option controls whether the notification request includes the content of the event (other details like the sender are still included). If `event_id_only` is enabled, it has no effect. For modern Android devices the notification content will still appear because it is loaded by the app. iPhone, however will send a notification saying only that a message arrived and who it came from. Set to false to only include the event ID and room ID in push notification payloads.",
          "default": true
        },
        "group_unread_count_by_room": {
          "type": "boolean",
          "description": "When a push notification is received, an unread count is also sent. This number can either be calculated as the number of unread messages for the user, or the number of *rooms* the user has unread messages in. If true, push clients will see the number of rooms with unread messages in them. Set to false to instead send the number of unread messages.",
          "default": true
        },
        "jitter_delay": {
          "$ref": "#/$defs/duration",
          "description": "Delays push notifications by a random amount up to the given duration. Useful for mitigating timing attacks. Optional.\n\n_Added in Synapse 1.84.0._",
          "default": "0s"
        }
      },
      "examples": [
        {
          "enabled": true,
          "include_content": false,
          "group_unread_count_by_room": false,
          "jitter_delay": "10s"
        }
      ]
    },
    "encryption_enabled_by_default_for_room_type": {
      "type": "string",
      "description": "Controls whether locally-created rooms should be end-to-end encrypted by default.\n\nPossible options are \"all\", \"invite\", and \"off\". They are defined as:\n\n* \"all\": any locally-created room\n* \"invite\": any room created with the `private_chat` or `trusted_private_chat` room creation presets\n* \"off\": this option will take no effect\n\nNote that this option will only affect rooms created after it is set. It will also not affect rooms created by other servers.",
      "enum": [
        "all",
        "invite",
        "off"
      ],
      "default": "off",
      "examples": [
        "invite"
      ]
    },
    "user_directory": {
      "type": "object",
      "description": "This setting defines options related to the user directory.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Defines whether users can search the user directory. If `false` then empty responses are returned to all queries.\n\n*Warning: While the homeserver may determine which subset of users are searched, the Matrix specification requires homeservers to include (at minimum) users visible in public rooms and users sharing a room with the requester. Using `false` improves performance but violates this requirement.*",
          "default": true
        },
        "search_all_users": {
          "type": "boolean",
          "description": "Defines whether to search all users visible to your homeserver at the time the search is performed. If set to true, will return all users known to the homeserver matching the search query. If false, search results will only contain users visible in public rooms and users sharing a room with the requester.\n\nNB. If you set this to true, and the last time the user_directory search indexes were (re)built was before Synapse 1.44, you'll have to rebuild the indexes in order to search through all known users.\n\nThese indexes are built the first time Synapse starts; admins can manually trigger a rebuild via the API following the instructions [for running background updates](../administration/admin_api/background_updates.md#run), set to true to return search results containing all known users, even if that user does not share a room with the requester.",
          "default": false
        },
        "prefer_local_users": {
          "type": "boolean",
          "description": "Defines whether to prefer local users in search query results. If set to true, local users are more likely to appear above remote users when searching the user directory.",
          "default": false
        },
        "exclude_remote_users": {
          "type": "boolean",
          "description": "If set to true, the search will only return local users.",
          "default": false
        },
        "show_locked_users": {
          "type": "boolean",
          "description": "Defines whether to show locked users in search query results.",
          "default": false
        }
      },
      "examples": [
        {
          "enabled": false,
          "search_all_users": true,
          "prefer_local_users": true,
          "exclude_remote_users": false,
          "show_locked_users": true
        }
      ]
    },
    "user_consent": {
      "type": "object",
      "description": "For detailed instructions on user consent configuration, see [here](../../consent_tracking.md).\n\nParts of this section are required if enabling the `consent` resource under [`listeners`](#listeners), in particular `template_dir` and `version`.",
      "properties": {
        "template_dir": {
          "type": "string",
          "description": "Gives the location of the templates for the HTML forms. This directory should contain one subdirectory per language (eg, `en`, `fr`), and each language directory should contain the policy document (named as <version>.html) and a success page (success.html)."
        },
        "version": {
          "type": "number",
          "description": "Specifies the \"current\" version of the policy document. It defines the version to be served by the consent resource if there is no `v` parameter."
        },
        "server_notice_content": {
          "type": "object",
          "description": "If enabled, will send a user a \"Server Notice\" asking them to consent to the privacy policy. The [`server_notices` section](#server_notices) must also be configured for this to work. Notices will *not* be sent to guest users unless `send_server_notice_to_guests` is set to true.",
          "properties": {
            "msgtype": {
              "type": "string",
              "description": "Message type of the notice event."
            },
            "body": {
              "type": "string",
              "description": "Message template for the server notice event body."
            }
          }
        },
        "send_server_notice_to_guests": {
          "type": "boolean",
          "description": "Send server notices to guest users, too.",
          "default": false
        },
        "block_events_error": {
          "type": [
            "string",
            "null"
          ],
          "description": "If set, will block any attempts to send events until the user consents to the privacy policy. The value of the setting is used as the text of the error.",
          "default": null
        },
        "require_at_registration": {
          "type": "boolean",
          "description": "If enabled, will add a step to the registration process, similar to how captcha works. Users will be required to accept the policy before their account is created."
        },
        "policy_name": {
          "type": "string",
          "description": "Human-readable name of the privacy policy.",
          "default": "Privacy Policy"
        }
      },
      "examples": [
        {
          "template_dir": "res/templates/privacy",
          "version": 1.0,
          "server_notice_content": {
            "msgtype": "m.text",
            "body": "To continue using this homeserver you must review and agree to the terms and conditions at %(consent_uri)s"
          },
          "send_server_notice_to_guests": true,
          "block_events_error": "To continue using this homeserver you must review and agree to the terms and conditions at %(consent_uri)s",
          "require_at_registration": false,
          "policy_name": "Privacy Policy"
        }
      ]
    },
    "stats": {
      "type": "object",
      "description": "Settings for local room and user statistics collection. See [here](../../room_and_user_statistics.md) for more.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Set to false to disable room and user statistics. Note that doing so may cause certain features (such as the room directory) not to work correctly.",
          "default": true
        }
      },
      "examples": [
        {
          "enabled": false
        }
      ]
    },
    "server_notices": {
      "type": "object",
      "description": "Use this setting to enable a room which can be used to send notices from the server to users. It is a special room which users cannot leave; notices in the room come from a special \"notices\" user id.\n\nIf you use this setting, you *must* define the `system_mxid_localpart` sub-setting, which defines the id of the user which will be used to send the notices.\n\nNote that the name, topic and avatar of existing server notice rooms will only be updated when a new notice event is sent.",
      "properties": {
        "system_mxid_display_name": {
          "type": "string",
          "description": "Display name of the \"notices\" user.",
          "default": "Notices"
        },
        "system_mxid_avatar_url": {
          "type": [
            "string",
            "null"
          ],
          "description": "Avatar for the \"notices\" user.",
          "default": null
        },
        "room_name": {
          "type": "string",
          "description": "Room name of the server notices room.",
          "default": "Server Notices"
        },
        "room_avatar_url": {
          "type": [
            "string",
            "null"
          ],
          "description": "Room avatar to use for server notice rooms. If set to the empty string `\"\"`, notice rooms will not be given an avatar.\n\n_Added in Synapse 1.99.0._",
          "default": null
        },
        "room_topic": {
          "type": [
            "string",
            "null"
          ],
          "description": "Topic to use for server notice rooms. If set to the empty string `\"\"`, notice rooms will not be given a topic. Defaults to the empty string.\n\n_Added in Synapse 1.99.0._",
          "default": null
        },
        "auto_join": {
          "type": "boolean",
          "description": "If true, the user will be automatically joined to the room instead of being invited.\n\n_Added in Synapse 1.98.0._",
          "default": false
        }
      },
      "examples": [
        {
          "system_mxid_localpart": "notices",
          "system_mxid_display_name": "Server Notices",
          "system_mxid_avatar_url": "mxc://example.com/oumMVlgDnLYFaPVkExemNVVZ",
          "room_name": "Server Notices",
          "room_avatar_url": "mxc://example.com/oumMVlgDnLYFaPVkExemNVVZ",
          "room_topic": "Room used by your server admin to notice you of important information",
          "auto_join": true
        }
      ]
    },
    "enable_room_list_search": {
      "type": "boolean",
      "description": "Set to false to disable searching the public room list. When disabled blocks searching local and remote room lists for local and remote users by always returning an empty list for all queries.",
      "default": true,
      "examples": [
        false
      ]
    },
    "alias_creation_rules": {
      "type": [
        "array",
        "null"
      ],
      "description": "The `alias_creation_rules` option allows server admins to prevent unwanted alias creation on this server.\n\nThis setting is an optional list of 0 or more rules. By default, no list is provided, meaning that all alias creations are permitted.\n\nOtherwise, requests to create aliases are matched against each rule in order. The first rule that matches decides if the request is allowed or denied. If no rule matches, the request is denied. In particular, this means that configuring an empty list of rules will deny every alias creation request.\n\nEach of the glob patterns is optional, defaulting to `*` (\"match anything\"). Note that the patterns match against fully qualified IDs, e.g. against `@alice:example.com`, `#room:example.com` and `!abcdefghijk:example.com` instead of `alice`, `room` and `abcedgghijk`.\n\nEach rule is a YAML object containing four fields, each of which is an optional string",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against the creator of the alias."
          },
          "alias": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against the alias being created."
          },
          "room_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against the room ID the alias is being pointed at."
          },
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ],
            "description": "Either `allow` or `deny`. What to do with the request if the rule matches. Defaults to `allow`."
          }
        }
      },
      "default": null,
      "examples": [
        null,
        [
          {
            "action": "allow"
          }
        ],
        [],
        [
          {
            "action": "deny"
          }
        ],
        [
          {
            "user_id": "@bad_user:example.com",
            "action": "deny"
          },
          {
            "action": "allow"
          }
        ],
        [
          {
            "room_id": "!forbiddenRoom:example.com",
            "action": "deny"
          },
          {
            "action": "allow"
          }
        ]
      ]
    },
    "room_list_publication_rules": {
      "type": [
        "array",
        "null"
      ],
      "description": "The `room_list_publication_rules` option allows server admins to prevent unwanted entries from being published in the public room list.\n\nThe format of this option is the same as that for [`alias_creation_rules`](#alias_creation_rules): an optional list of 0 or more rules. By default, no list is provided, meaning that no one may publish to the room list (except server admins).\n\nOtherwise, requests to publish a room are matched against each rule in order. The first rule that matches decides if the request is allowed or denied. If no rule matches, the request is denied. In particular, this means that configuring an empty list of rules will deny every alias creation request.\n\nRequests to create a public (public as in published to the room directory) room which violates the configured rules will result in the room being created but not published to the room directory.\n\nEach of the glob patterns is optional, defaulting to `*` (\"match anything\"). Note that the patterns match against fully qualified IDs, e.g. against `@alice:example.com`, `#room:example.com` and `!abcdefghijk:example.com` instead of `alice`, `room` and `abcedgghijk`.\n\nEach rule is a YAML object containing four fields, each of which is an optional string.\n\n_Changed in Synapse 1.126.0: The default was changed to deny publishing to the room list by default_",
      "items": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against the user publishing the room."
          },
          "alias": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against one of published room's aliases.\n- If the room has no aliases, the alias match fails unless `alias` is unspecified or `*`.\n- If the room has exactly one alias, the alias match succeeds if the `alias` pattern matches that alias.\n- If the room has two or more aliases, the alias match succeeds if the pattern matches at least one of the aliases."
          },
          "room_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Glob pattern that matches against the room ID of the room being published."
          },
          "action": {
            "type": "string",
            "enum": [
              "allow",
              "deny"
            ],
            "description": "Either `allow` or `deny`. What to do with the request if the rule matches. Defaults to `allow`."
          }
        }
      },
      "default": null,
      "examples": [
        null,
        [
          {
            "action": "deny"
          }
        ],
        [],
        [
          {
            "action": "allow"
          }
        ],
        [
          {
            "user_id": "@bad_user:example.com",
            "action": "deny"
          },
          {
            "action": "allow"
          }
        ],
        [
          {
            "room_id": "!forbiddenRoom:example.com",
            "action": "deny"
          },
          {
            "action": "allow"
          }
        ],
        [
          {
            "alias": "#*potato*:example.com",
            "action": "deny"
          },
          {
            "action": "allow"
          }
        ]
      ]
    },
    "default_power_level_content_override": {
      "type": "object",
      "description": "The `default_power_level_content_override` option controls the default power levels for rooms.\n\nUseful if you know that your users need special permissions in rooms that they create (e.g. to send particular types of state events without needing an elevated power level).  This takes the same shape as the `power_level_content_override` parameter in the /createRoom API, but is applied before that parameter.\n\nNote that each key provided inside a preset (for example `events` in the example below) will overwrite all existing defaults inside that key. So in Example #1, newly-created private_chat rooms will have no rules for any event types except `com.example.foo`.\n\nThe default power levels for each preset are:\n\n```yaml\n\"m.room.name\": 50\n\"m.room.power_levels\": 100\n\"m.room.history_visibility\": 100\n\"m.room.canonical_alias\": 50\n\"m.room.avatar\": 50\n\"m.room.tombstone\": 100\n\"m.room.server_acl\": 100\n\"m.room.encryption\": 100\n```\n\nIn Example #2 the default power-levels for a preset are maintained, but the power level for a new key is set.",
      "default": {},
      "examples": [
        {
          "private_chat": {
            "events": {
              "com.example.foo": 0
            }
          },
          "trusted_private_chat": null,
          "public_chat": null
        },
        {
          "private_chat": {
            "events": {
              "com.example.foo": 0,
              "m.room.name": 50,
              "m.room.power_levels": 100,
              "m.room.history_visibility": 100,
              "m.room.canonical_alias": 50,
              "m.room.avatar": 50,
              "m.room.tombstone": 100,
              "m.room.server_acl": 100,
              "m.room.encryption": 100
            }
          },
          "trusted_private_chat": null,
          "public_chat": null
        }
      ]
    },
    "forget_rooms_on_leave": {
      "type": "boolean",
      "description": "Set to true to automatically forget rooms for users when they leave them, either normally or via a kick or ban.",
      "default": false,
      "examples": [
        true
      ]
    },
    "exclude_rooms_from_sync": {
      "type": "array",
      "description": "A list of rooms to exclude from sync responses. This is useful for server administrators wishing to group users into a room without these users being able to see it from their client.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "!foo:example.com"
        ]
      ]
    },
    "opentracing": {
      "type": "object",
      "description": "These settings enable and configure opentracing, which implements distributed tracing. This allows you to observe the causal chains of events across servers including requests, key lookups etc., across any server running synapse or any other services which support opentracing (specifically those implemented with Jaeger).",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether tracing is enabled. Set to true to enable.",
          "default": false
        },
        "homeserver_whitelist": {
          "type": "array",
          "description": "The list of homeservers we wish to send and receive span contexts and span baggage. See [here](../../opentracing.md) for more. This is a list of regexes which are matched against the `server_name` of the homeserver. If the list is empty, no servers are matched.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "force_tracing_for_users": {
          "type": "array",
          "description": "A list of the matrix IDs of users whose requests will always be traced, even if the tracing system would otherwise drop the traces due to probabilistic sampling.",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "jaeger_config": {
          "type": "object",
          "description": "Jaeger can be configured to sample traces at different rates. All configuration options provided by Jaeger can be set here. Jaeger's configuration is mostly related to trace sampling which is documented [here](https://www.jaegertracing.io/docs/latest/sampling/).",
          "default": {}
        }
      },
      "examples": [
        {
          "enabled": true,
          "homeserver_whitelist": [
            ".*"
          ],
          "force_tracing_for_users": [
            "@user1:server_name",
            "@user2:server_name"
          ],
          "jaeger_config": {
            "sampler": {
              "type": "const",
              "param": 1
            },
            "logging": false
          }
        }
      ]
    },
    "worker_replication_secret": {
      "type": [
        "string",
        "null"
      ],
      "description": "A shared secret used by the replication APIs on the main process to authenticate HTTP requests from workers.\n\nIf unset or null, traffic between the workers and the main process is not authenticated.\n\nReplacing an existing `worker_replication_secret` with a new one will break communication with all workers that have not yet updated their secret.",
      "default": null,
      "examples": [
        "secret_secret"
      ]
    },
    "worker_replication_secret_path": {
      "type": [
        "string",
        "null"
      ],
      "description": "An alternative to [`worker_replication_secret`](#worker_replication_secret): allows the secret to be specified in an external file.\n\nThe file should be a plain text file, containing only the secret. Synapse reads the secret from the given file once at startup.\n\n_Added in Synapse 1.126.0._",
      "default": null,
      "examples": [
        "/path/to/secrets/file"
      ]
    },
    "start_pushers": {
      "type": "boolean",
      "description": "Unnecessary to set if using [`pusher_instances`](#pusher_instances) with [`generic_workers`](../../workers.md#synapseappgeneric_worker).\n\nControls sending of push notifications on the main process. Set to `false` if using a [pusher worker](../../workers.md#synapseapppusher).",
      "default": true,
      "examples": [
        false
      ]
    },
    "pusher_instances": {
      "type": "array",
      "description": "It is possible to scale the processes that handle sending push notifications to [sygnal](https://github.com/matrix-org/sygnal) and email by running a [`generic_worker`](../../workers.md#synapseappgeneric_worker) and adding it's [`worker_name`](#worker_name) to a `pusher_instances` map. Doing so will remove handling of this function from the main process. Multiple workers can be added to this map, in which case the work is balanced across them. Ensure the main process and all pusher workers are restarted after changing this option.",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "pusher_worker1"
        ],
        [
          "pusher_worker1",
          "pusher_worker2"
        ]
      ]
    },
    "send_federation": {
      "type": "boolean",
      "description": "Unnecessary to set if using [`federation_sender_instances`](#federation_sender_instances) with [`generic_workers`](../../workers.md#synapseappgeneric_worker).\n\nControls sending of outbound federation transactions on the main process. Set to `false` if using a [federation sender worker](../../workers.md#synapseappfederation_sender).",
      "default": true,
      "examples": [
        false
      ]
    },
    "federation_sender_instances": {
      "type": "array",
      "description": "It is possible to scale the processes that handle sending outbound federation requests by running a [`generic_worker`](../../workers.md#synapseappgeneric_worker) and adding it's [`worker_name`](#worker_name) to a `federation_sender_instances` map. Doing so will remove handling of this function from the main process. Multiple workers can be added to this map, in which case the work is balanced across them.\n\nThe way that the load balancing works is any outbound federation request will be assigned to a federation sender worker based on the hash of the destination server name. This means that all requests being sent to the same destination will be processed by the same worker instance. Multiple `federation_sender_instances` are useful if there is a federation with multiple servers.\n\nThis configuration setting must be shared between all workers handling federation sending, and if changed all federation sender workers must be stopped at the same time and then started, to ensure that all instances are running with the same config (otherwise events may be dropped).",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "federation_sender1"
        ],
        [
          "federation_sender1",
          "federation_sender2"
        ]
      ]
    },
    "instance_map": {
      "type": "object",
      "description": "When using workers this should be a map from [`worker_name`](#worker_name) to the HTTP replication listener of the worker, if configured, and to the main process. Each worker declared under [`stream_writers`](../../workers.md#stream-writers) and [`outbound_federation_restricted_to`](#outbound_federation_restricted_to) needs a HTTP replication listener, and that listener should be included in the `instance_map`. The main process also needs an entry on the `instance_map`, and it should be listed under `main` **if even one other worker exists**. Ensure the port matches with what is declared inside the `listener` block for a `replication` listener.",
      "additionalProperties": {
        "type": "object"
      },
      "default": {},
      "examples": [
        {
          "main": {
            "host": "localhost",
            "port": 8030
          },
          "worker1": {
            "host": "localhost",
            "port": 8034
          },
          "other": {
            "host": "localhost",
            "port": 8035,
            "tls": true
          }
        },
        {
          "main": {
            "path": "/run/synapse/main_replication.sock"
          },
          "worker1": {
            "path": "/run/synapse/worker1_replication.sock"
          }
        }
      ]
    },
    "stream_writers": {
      "type": "object",
      "description": "Experimental: When using workers you can define which workers should handle writing to streams such as event persistence and typing notifications. Any worker specified here must also be in the [`instance_map`](#instance_map).\n\nSee the list of available streams in the [worker documentation](../../workers.md#stream-writers).",
      "properties": {
        "events": {
          "type": "string",
          "description": "Name of a worker assigned to the `events` stream."
        },
        "typing": {
          "type": "string",
          "description": "Name of a worker assigned to the `typing` stream."
        },
        "to_device": {
          "type": "string",
          "description": "Name of a worker assigned to the `to_device` stream."
        },
        "account_data": {
          "type": "string",
          "description": "Name of a worker assigned to the `account_data` stream."
        },
        "receipts": {
          "type": "string",
          "description": "Name of a worker assigned to the `receipts` stream."
        },
        "presence": {
          "type": "string",
          "description": "Name of a worker assigned to the `presence` stream."
        },
        "push_rules": {
          "type": "string",
          "description": "Name of a worker assigned to the `push_rules` stream."
        },
        "device_lists": {
          "type": "string",
          "description": "Name of a worker assigned to the `device_lists` stream."
        }
      },
      "default": {},
      "examples": [
        {
          "events": "worker1",
          "typing": "worker1"
        }
      ]
    },
    "outbound_federation_restricted_to": {
      "type": "array",
      "description": "When using workers, you can restrict outbound federation traffic to only go through a specific subset of workers. Any worker specified here must also be in the [`instance_map`](#instance_map). [`worker_replication_secret`](#worker_replication_secret) must also be configured to authorize inter-worker communication.\n\nAlso see the [worker documentation](../../workers.md#restrict-outbound-federation-traffic-to-a-specific-set-of-workers) for more info.\n\n_Added in Synapse 1.89.0._",
      "items": {
        "type": "string"
      },
      "default": [],
      "examples": [
        [
          "federation_sender1",
          "federation_sender2"
        ]
      ]
    },
    "run_background_tasks_on": {
      "type": [
        "string",
        "null"
      ],
      "description": "The [worker](../../workers.md#background-tasks) that is used to run background tasks (e.g. cleaning up expired data). If not provided this defaults to the main process.",
      "default": null,
      "examples": [
        "worker1"
      ]
    },
    "update_user_directory_from_worker": {
      "type": [
        "string",
        "null"
      ],
      "description": "The [worker](../../workers.md#updating-the-user-directory) that is used to update the user directory. If not provided this defaults to the main process.\n\n_Added in Synapse 1.59.0._",
      "default": null,
      "examples": [
        "worker1"
      ]
    },
    "notify_appservices_from_worker": {
      "type": [
        "string",
        "null"
      ],
      "description": "The [worker](../../workers.md#notifying-application-services) that is used to send output traffic to Application Services. If not provided this defaults to the main process.\n\n_Added in Synapse 1.59.0._",
      "default": null,
      "examples": [
        "worker1"
      ]
    },
    "media_instance_running_background_jobs": {
      "type": [
        "string",
        "null"
      ],
      "description": "The [worker](../../workers.md#synapseappmedia_repository) that is used to run background tasks for media repository. If running multiple media repositories you must configure a single instance to run the background tasks. If not provided this defaults to the main process or your single `media_repository` worker.\n\n_Added in Synapse 1.16.0._",
      "default": null,
      "examples": [
        "worker1"
      ]
    },
    "redis": {
      "type": "object",
      "description": "Configuration for Redis when using workers. This *must* be enabled when using workers.\n\n_Added in Synapse 1.78.0._\n\n_Changed in Synapse 1.84.0: Added use\\_tls, certificate\\_file, private\\_key\\_file, ca\\_file and ca\\_path attributes_\n\n_Changed in Synapse 1.85.0: Added path option to use a local Unix socket_\n\n_Changed in Synapse 1.116.0: Added password\\_path_",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to use Redis support.",
          "default": false
        },
        "host": {
          "type": "string",
          "description": "Optional host to use to connect to Redis.",
          "default": "localhost"
        },
        "port": {
          "type": "integer",
          "description": "Optional port to use to connect to Redis.",
          "default": 6379
        },
        "path": {
          "type": "string",
          "description": "The full path to a local Unix socket file. **If this is used, `host` and `port` are ignored.**",
          "default": "/tmp/redis.sock"
        },
        "password": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional password if configured on the Redis instance.",
          "default": null
        },
        "password_path": {
          "type": [
            "string",
            "null"
          ],
          "description": "Alternative to `password`, reading the password from an external file. The file should be a plain text file, containing only the password. Synapse reads the password from the given file once at startup.",
          "default": null
        },
        "dbid": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional redis dbid if needs to connect to specific redis logical db.",
          "default": null
        },
        "use_tls": {
          "type": "boolean",
          "description": "Whether to use a TLS connection.",
          "default": false
        },
        "certificate_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional path to the certificate file.",
          "default": null
        },
        "private_key_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional path to the private key file.",
          "default": null
        },
        "ca_file": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional path to the CA certificate file. Use this one or `ca_path`",
          "default": null
        },
        "ca_path": {
          "type": [
            "string",
            "null"
          ],
          "description": "Optional path to the folder containing the CA certificate file. Use this one or `ca_file`",
          "default": null
        }
      },
      "examples": [
        {
          "enabled": true,
          "host": "localhost",
          "port": 6379,
          "password_path": "<path_to_the_password_file>",
          "dbid": "<dbid>"
        }
      ]
    },
    "worker_app": {
      "type": "string",
      "description": "The type of worker. The currently available worker applications are listed in [worker documentation](../../workers.md#available-worker-applications).\n\nThe most common worker is the [`synapse.app.generic_worker`](../../workers.md#synapseappgeneric_worker).",
      "examples": [
        "synapse.app.generic_worker"
      ]
    },
    "worker_name": {
      "type": "string",
      "description": "A unique name for the worker. The worker needs a name to be addressed in further parameters and identification in log files. We strongly recommend giving each worker a unique `worker_name`.",
      "examples": [
        "generic_worker1"
      ]
    },
    "worker_listeners": {
      "type": "array",
      "description": "A worker can handle HTTP requests. To do so, a `worker_listeners` option must be declared, in the same way as the [`listeners` option](#listeners) in the shared config.\n\nWorkers declared in [`stream_writers`](#stream_writers) and [`instance_map`](#instance_map) will need to include a `replication` listener here, in order to accept internal HTTP requests from other workers.\n\nExample #2 is using UNIX sockets with a `replication` listener.",
      "default": [],
      "examples": [
        [
          {
            "type": "http",
            "port": 8083,
            "resources": [
              {
                "names": [
                  "client",
                  "federation"
                ]
              }
            ]
          }
        ],
        [
          {
            "type": "http",
            "path": "/run/synapse/worker_replication.sock",
            "resources": [
              {
                "names": [
                  "replication"
                ]
              }
            ]
          },
          {
            "type": "http",
            "path": "/run/synapse/worker_public.sock",
            "resources": [
              {
                "names": [
                  "client",
                  "federation"
                ]
              }
            ]
          }
        ]
      ]
    },
    "worker_manhole": {
      "type": [
        "integer",
        "null"
      ],
      "description": "A worker may have a listener for [`manhole`](../../manhole.md). It allows server administrators to access a Python shell on the worker.\n\nThe example below is a short form for\n```yaml\nworker_listeners:\n  - port: 9000\n    bind_addresses: ['127.0.0.1']\n    type: manhole\n```\n\nIt needs also an additional [`manhole_settings`](#manhole_settings) configuration.",
      "default": null,
      "examples": [
        9000
      ]
    },
    "worker_daemonize": {
      "type": "boolean",
      "description": "Specifies whether the worker should be started as a daemon process. If Synapse is being managed by [systemd](../../systemd-with-workers/), this option must be omitted or set to `false`.",
      "default": false,
      "examples": [
        true
      ]
    },
    "worker_pid_file": {
      "type": [
        "string",
        "null"
      ],
      "description": "When running a worker as a daemon, we need a place to store the [PID](https://en.wikipedia.org/wiki/Process_identifier) of the worker. This option defines the location of that \"pid file\".\n\nThis option is required if `worker_daemonize` is `true` and ignored otherwise.\n\nSee also the [`pid_file` option](#pid_file) option for the main Synapse process.",
      "default": null,
      "examples": [
        "DATADIR/generic_worker1.pid"
      ]
    },
    "worker_log_config": {
      "type": [
        "string",
        "null"
      ],
      "description": "This option specifies a yaml python logging config file as described [here](https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema). See also the [`log_config` option](#log_config) option for the main Synapse process.",
      "default": null,
      "examples": [
        "/etc/matrix-synapse/generic-worker-log.yaml"
      ]
    },
    "background_updates": {
      "type": "object",
      "description": "Background updates are database updates that are run in the background in batches. The duration, minimum batch size, default batch size, whether to sleep between batches and if so, how long to sleep can all be configured. This is helpful to speed up or slow down the updates.",
      "properties": {
        "background_update_duration_ms": {
          "type": "integer",
          "description": "How long in milliseconds to run a batch of background updates for.",
          "default": 100
        },
        "sleep_enabled": {
          "type": "boolean",
          "description": "Whether to sleep between updates.",
          "default": true
        },
        "sleep_duration_ms": {
          "type": "integer",
          "description": "If sleeping between updates, how long in milliseconds to sleep for.",
          "default": 1000
        },
        "min_batch_size": {
          "type": "integer",
          "description": "Minimum size a batch of background updates can be. Must be greater than 0.",
          "default": 1
        },
        "default_batch_size": {
          "type": "integer",
          "description": "The batch size to use for the first iteration of a new background update.",
          "default": 100
        }
      },
      "examples": [
        {
          "background_update_duration_ms": 500,
          "sleep_enabled": false,
          "sleep_duration_ms": 300,
          "min_batch_size": 10,
          "default_batch_size": 50
        }
      ]
    },
    "auto_accept_invites": {
      "type": "object",
      "description": "Automatically accepting invites controls whether users are presented with an invite request or if they are instead automatically joined to a room when receiving an invite. Set the `enabled` sub-option to true to enable auto-accepting invites.\n\nNOTE: Care should be taken not to enable this setting if the `synapse_auto_accept_invite` module is enabled and installed. The two modules will compete to perform the same task and may result in undesired behaviour. For example, multiple join events could be generated from a single invite.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether to run the auto-accept invites logic.",
          "default": false
        },
        "only_for_direct_messages": {
          "type": "boolean",
          "description": "Whether invites should be automatically accepted for all room types, or only for direct messages.",
          "default": false
        },
        "only_from_local_users": {
          "type": "boolean",
          "description": "Whether to only automatically accept invites from users on this homeserver.",
          "default": false
        },
        "worker_to_run_on": {
          "type": [
            "string",
            "null"
          ],
          "description": "Which worker to run this module on. This must match the \"worker_name\". If not set or `null`, invites will be accepted on the main process.",
          "default": null
        }
      },
      "examples": [
        {
          "enabled": true,
          "only_for_direct_messages": true,
          "only_from_local_users": true,
          "worker_to_run_on": "worker_1"
        }
      ]
    }
  },
  "$defs": {
    "bytes": {
      "type": [
        "string",
        "integer"
      ],
      "io.element.type_name": "byte size"
    },
    "duration": {
      "type": [
        "string",
        "integer"
      ],
      "io.element.type_name": "duration"
    },
    "size": {
      "type": [
        "string",
        "integer"
      ],
      "io.element.type_name": "size"
    },
    "3pidmedium": {
      "type": "string",
      "enum": [
        "email",
        "msisdn"
      ]
    },
    "rc": {
      "type": "object",
      "properties": {
        "per_second": {
          "type": "number",
          "description": "Maximum number of requests a client can send per second."
        },
        "burst_count": {
          "type": "number",
          "description": "Maximum number of requests a client can send before being throttled."
        }
      }
    },
    "database": {
      "type": "object",
      "description": "The `database` setting defines the database that synapse uses to store all of its data.\n\nFor more information on using Synapse with Postgres, see [here](../../postgres.md).",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "sqlite3",
            "psycopg2"
          ],
          "description": "This option specifies the database engine to use: either `sqlite3` (for SQLite) or `psycopg2` (for PostgreSQL). If no name is specified Synapse will default to SQLite.",
          "default": "sqlite3"
        },
        "txn_limit": {
          "type": "integer",
          "description": "Gives the maximum number of transactions to run per connection before reconnecting. 0 means no limit.",
          "default": 0
        },
        "allow_unsafe_locale": {
          "type": "boolean",
          "description": "This option is specific to Postgres. Under the default behavior, Synapse will refuse to start if the postgres db is set to a non-C locale. You can override this behavior (which is *not* recommended) by setting `allow_unsafe_locale` to true. Note that doing so may corrupt your database. You can find more information [here](../../postgres.md#fixing-incorrect-collate-or-ctype) and [here](https://wiki.postgresql.org/wiki/Locale_data_changes).",
          "default": false
        },
        "args": {
          "type": "object",
          "description": "Gives options which are passed through to the database engine, except for options starting with `cp_`, which are used to configure the Twisted connection pool. For a reference to valid arguments, see:\n* for [sqlite](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect)\n* for [postgres](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS)\n* for [the connection pool](https://docs.twistedmatrix.com/en/stable/api/twisted.enterprise.adbapi.ConnectionPool.html#__init__)"
        }
      }
    }
  }
}
